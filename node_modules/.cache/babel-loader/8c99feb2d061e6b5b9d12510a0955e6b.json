{"ast":null,"code":"var _jsxFileName = \"/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport './style.css';\n\nfunction Game(props) {\n  const {\n    player: {\n      name,\n      score,\n      gravatarEmail\n    }\n  } = props;\n  const [questions, setQuestions] = useState([]);\n  const [index, setIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const FIFTYCENT = 0.5;\n\n  async function handleTrivia() {\n    const fetchTrivia = await fetchTriviaApi();\n    setQuestions(fetchTrivia.results);\n  }\n\n  function handleAnswers() {\n    if (questions.length > 0) {\n      const {\n        correct_answer: correct,\n        incorrect_answers: incorrect\n      } = questions[index]; // https://flaviocopes.com/how-to-shuffle-array-javascript/\n\n      let allAnswers = [correct, ...incorrect];\n      allAnswers = allAnswers.sort(() => Math.random() - FIFTYCENT);\n      setAnswers(allAnswers);\n    }\n  }\n\n  function handleClick() {\n    console.log('click');\n  }\n\n  useEffect(() => {\n    handleTrivia();\n  }, []);\n  useEffect(() => {\n    handleAnswers();\n  }, [questions]);\n  console.log(questions, answers);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"TRIVIA\"), /*#__PURE__*/React.createElement(TableApp, {\n    name: name,\n    score: score,\n    gravatarEmail: gravatarEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, questions.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, `Category: ${questions[index].category}`), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, questions[index].question), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, answers.map((answer, item) => {\n    if (answer === correct) {\n      return /*#__PURE__*/React.createElement(Button, {\n        className: \"correct\",\n        \"data-testid\": \"correct-answer\",\n        disabled: disabled,\n        onClick: () => handleClick(),\n        type: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }\n      });\n    }\n  })))));\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  player: state.player\n});\n\nexport default connect(mapStateToProps, null)(Game);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx"],"names":["React","useState","useEffect","PropTypes","connect","fetchTriviaApi","TableApp","Button","Game","props","player","name","score","gravatarEmail","questions","setQuestions","index","setIndex","answers","setAnswers","disabled","setDisabled","loading","setLoading","FIFTYCENT","handleTrivia","fetchTrivia","results","handleAnswers","length","correct_answer","correct","incorrect_answers","incorrect","allAnswers","sort","Math","random","handleClick","console","log","category","question","map","answer","item","propTypes","string","number","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport './style.css';\n\nfunction Game(props) {\n  const { player: { name, score, gravatarEmail } } = props;\n  const [questions, setQuestions] = useState([]);\n  const [index, setIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const FIFTYCENT = 0.5;\n\n  async function handleTrivia() {\n    const fetchTrivia = await fetchTriviaApi();\n    setQuestions(fetchTrivia.results);\n  }\n\n  function handleAnswers() {\n    if (questions.length > 0) {\n      const {\n        correct_answer: correct,\n        incorrect_answers: incorrect,\n      } = questions[index];\n      // https://flaviocopes.com/how-to-shuffle-array-javascript/\n      let allAnswers = [correct, ...incorrect];\n      allAnswers = allAnswers.sort(() => Math.random() - FIFTYCENT);\n      setAnswers(allAnswers);\n    }\n  }\n\n  function handleClick() {\n    console.log('click');\n  }\n\n  useEffect(() => {\n    handleTrivia();\n  }, []);\n\n  useEffect(() => {\n    handleAnswers();\n  }, [questions]);\n\n  console.log(questions, answers);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>TRIVIA</h1>\n        <TableApp\n          name={ name }\n          score={ score }\n          gravatarEmail={ gravatarEmail }\n        />\n      </header>\n      <main>\n        { questions.length > 0 && (\n          <div>\n            <p data-testid=\"question-category\">\n              { `Category: ${questions[index].category}` }\n            </p>\n            <p data-testid=\"question-text\">\n              { questions[index].question }\n            </p>\n            <div>\n              { /* // https://flaviocopes.com/how-to-shuffle-array-javascript/ */}\n              { answers.map((answer, item) => {\n                if (answer === correct) {\n                  return (\n                    <Button\n                      className=\"correct\"\n                      data-testid=\"correct-answer\"\n                      disabled={ disabled }\n                      onClick={ () => handleClick() }\n                      type=\"button\"\n                    />\n                  );\n                }\n              })}\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n});\n\nexport default connect(mapStateToProps, null)(Game);\n"]},"metadata":{},"sourceType":"module"}