{"ast":null,"code":"var _jsxFileName = \"/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport { requestToken } from '../../store/actions';\nimport fetchToken from '../../services/token';\nimport Loading from '../../components/Loading';\nimport './style.css';\n\nfunction Game(props) {\n  const NOT_FOUND = 3;\n  const ONE_SECOND = 1000;\n  const THIRTY = 30;\n  const FIFTYCENT = 0.5;\n  const interval = useRef();\n  const {\n    dispatchToken,\n    player: {\n      name,\n      score,\n      gravatarEmail\n    },\n    token\n  } = props;\n  const [questions, setQuestions] = useState([]);\n  const [timer, setTimer] = useState(THIRTY);\n  const [disabled, setDisabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  async function handleTrivia() {\n    setLoading(true);\n    let fetchTrivia = await fetchTriviaApi(token);\n\n    if (fetchTrivia.response_code === NOT_FOUND) {\n      const tokenInfo = await fetchToken();\n      dispatchToken(tokenInfo.token);\n      fetchTrivia = await fetchTriviaApi(tokenInfo.token);\n    }\n\n    setQuestions(fetchTrivia.results);\n    setLoading(false);\n  }\n\n  function handleClick() {\n    console.log('click');\n  }\n\n  useEffect(() => {\n    function handleTimer() {\n      function runTimer() {\n        interval.current = setInterval(() => {\n          setTimer(count => count - 1);\n        }, ONE_SECOND);\n      }\n\n      if (timer <= 0 && interval.current) {\n        setDisabled(true);\n        clearInterval(interval.current);\n      }\n\n      if (timer === THIRTY) {\n        runTimer();\n      }\n    }\n\n    handleTimer();\n  }, [timer]);\n  useEffect(() => {\n    // did mount + should update (return)\n    handleTrivia();\n  }, []);\n  useEffect(() => {\n    // did update\n    const [index, setIndex] = useState(0);\n    const [answers, setAnswers] = useState({\n      correct: '',\n      incorrect: [],\n      all: []\n    });\n\n    function handleAnswers() {\n      if (questions.length > 0) {\n        const {\n          correct_answer: correct,\n          incorrect_answers: incorrect\n        } = questions[index]; // https://flaviocopes.com/how-to-shuffle-array-javascript/\n\n        let all = [correct, ...incorrect];\n        all = all.sort(() => Math.random() - FIFTYCENT);\n        setAnswers({ ...answers,\n          correct,\n          incorrect,\n          all\n        });\n      }\n    }\n\n    handleAnswers();\n  }, [questions]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"TRIVIA\"), /*#__PURE__*/React.createElement(TableApp, {\n    name: name,\n    score: score,\n    gravatarEmail: gravatarEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, loading && /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 22\n    }\n  }), questions.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, `Category: ${questions[index].category}`), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, `Time: ${timer}`), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, questions[index].question), /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"answer-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, answers.all.map((answer, item) => {\n    if (answer === answers.correct) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"correct\",\n        dataTestid: \"correct-answer\",\n        disabled: disabled,\n        onClick: () => handleClick(),\n        text: answers.correct,\n        type: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 23\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"incorrect\",\n      dataTestid: `wrong-answer-${item}`,\n      disabled: disabled,\n      onClick: () => handleClick(),\n      text: answer,\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }\n    }));\n  })))));\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n  token: PropTypes.string\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  token: state.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchToken: tokenInfo => dispatch(requestToken(tokenInfo))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx"],"names":["React","useState","useEffect","useRef","PropTypes","connect","fetchTriviaApi","TableApp","Button","requestToken","fetchToken","Loading","Game","props","NOT_FOUND","ONE_SECOND","THIRTY","FIFTYCENT","interval","dispatchToken","player","name","score","gravatarEmail","token","questions","setQuestions","timer","setTimer","disabled","setDisabled","loading","setLoading","handleTrivia","fetchTrivia","response_code","tokenInfo","results","handleClick","console","log","handleTimer","runTimer","current","setInterval","count","clearInterval","index","setIndex","answers","setAnswers","correct","incorrect","all","handleAnswers","length","correct_answer","incorrect_answers","sort","Math","random","category","question","map","answer","item","propTypes","string","number","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport { requestToken } from '../../store/actions';\nimport fetchToken from '../../services/token';\nimport Loading from '../../components/Loading';\nimport './style.css';\n\nfunction Game(props) {\n  const NOT_FOUND = 3;\n  const ONE_SECOND = 1000;\n  const THIRTY = 30;\n  const FIFTYCENT = 0.5;\n  const interval = useRef();\n  const { dispatchToken, player: { name, score, gravatarEmail }, token } = props;\n  const [questions, setQuestions] = useState([]);\n\n  const [timer, setTimer] = useState(THIRTY);\n  const [disabled, setDisabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n\n  async function handleTrivia() {\n    setLoading(true);\n    let fetchTrivia = await fetchTriviaApi(token);\n    if (fetchTrivia.response_code === NOT_FOUND) {\n      const tokenInfo = await fetchToken();\n      dispatchToken(tokenInfo.token);\n      fetchTrivia = await fetchTriviaApi(tokenInfo.token);\n    }\n    setQuestions(fetchTrivia.results);\n    setLoading(false);\n  }\n\n  function handleClick() {\n    console.log('click');\n  }\n\n  useEffect(() => {\n    function handleTimer() {\n      function runTimer() {\n        interval.current = setInterval(() => {\n          setTimer((count) => count - 1);\n        }, ONE_SECOND);\n      }\n      if (timer <= 0 && interval.current) {\n        setDisabled(true);\n        clearInterval(interval.current);\n      }\n      if (timer === THIRTY) {\n        runTimer();\n      }\n    }\n    handleTimer();\n  }, [timer]);\n\n  useEffect(() => { // did mount + should update (return)\n    handleTrivia();\n  }, []);\n\n  useEffect(() => { // did update\n    const [index, setIndex] = useState(0);\n    const [answers, setAnswers] = useState({\n      correct: '',\n      incorrect: [],\n      all: [],\n    });\n    function handleAnswers() {\n      if (questions.length > 0) {\n        const {\n          correct_answer: correct,\n          incorrect_answers: incorrect,\n        } = questions[index];\n        // https://flaviocopes.com/how-to-shuffle-array-javascript/\n        let all = [correct, ...incorrect];\n        all = all.sort(() => Math.random() - FIFTYCENT);\n        setAnswers({\n          ...answers,\n          correct,\n          incorrect,\n          all,\n        });\n      }\n    }\n    handleAnswers();\n  }, [questions]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>TRIVIA</h1>\n        <TableApp\n          name={ name }\n          score={ score }\n          gravatarEmail={ gravatarEmail }\n        />\n      </header>\n      <main>\n        { loading && <Loading />}\n        { questions.length > 0 && (\n          <div>\n            <p data-testid=\"question-category\">\n              { `Category: ${questions[index].category}` }\n            </p>\n            <p>{ `Time: ${timer}` }</p>\n            <p data-testid=\"question-text\">\n              { questions[index].question }\n            </p>\n            <div data-testid=\"answer-options\">\n              { /* // https://flaviocopes.com/how-to-shuffle-array-javascript/ */}\n              { answers.all.map((answer, item) => {\n                if (answer === answers.correct) {\n                  return (\n                    <div key={ item }>\n                      <Button\n                        className=\"correct\"\n                        dataTestid=\"correct-answer\"\n                        disabled={ disabled }\n                        onClick={ () => handleClick() }\n                        text={ answers.correct }\n                        type=\"button\"\n                      />\n                    </div>\n                  );\n                }\n                return (\n                  <div key={ item }>\n                    <Button\n                      className=\"incorrect\"\n                      dataTestid={ `wrong-answer-${item}` }\n                      disabled={ disabled }\n                      onClick={ () => handleClick() }\n                      text={ answer }\n                      type=\"button\"\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n  token: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  token: state.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchToken: (tokenInfo) => dispatch(requestToken(tokenInfo)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}