{"ast":null,"code":"import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { SCORE_INIT, SCORE_EASY, SCORE_MEDIUM, SCORE_HARD } from '../constants/ScreenGame';\nimport { setUserInfo } from '../../action';\nexport function CheckAnswer(_ref, props) {\n  let {\n    target\n  } = _ref;\n  const {\n    player: {\n      name,\n      email,\n      score,\n      total,\n      assertions\n    },\n    questions,\n    parameters: {\n      Interval,\n      index\n    }\n  } = props;\n  useEffect(() => {\n    handleApi();\n    setInterval(() => {\n      setIntervallGame(Interval => Interval - UM);\n    }, MIL);\n    return () => clearInterval(Interval);\n  }, []);\n  console.log(`Interval - ${Interval} / index - ${index}`);\n  let difficulty = 0;\n\n  if (questions[index].difficulty === 'easy') {\n    difficulty = SCORE_EASY;\n  } else if (questions[index].difficulty === 'medium') {\n    difficulty = SCORE_MEDIUM;\n  } else if (questions[index].difficulty === 'hard') {\n    difficulty = SCORE_HARD;\n  }\n\n  const isCorrect = target.getAttribute('data-testid').includes('correct');\n\n  if (isCorrect) {\n    const newScore = SCORE_INIT + Interval * difficulty;\n    const userInfo = {\n      name,\n      email,\n      score: score + newScore,\n      total: total + newScore,\n      assertions: assertions + 1\n    };\n    localStorage.setItem('player', JSON.stringify(userInfo));\n    props.dispatchUserInfo(userInfo);\n  }\n}\nexport function clickMe(_ref2) {\n  let {\n    target\n  } = _ref2;\n  console.log(`Clicou ${target}`);\n}\ncheckAnswer.propTypes = {\n  player: PropTypes.instanceOf(Object),\n  dispatchUserInfo: PropTypes.func,\n  history: PropTypes.instanceOf(Object),\n  questions: PropTypes.instanceOf(Object)\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  questions: state.questions,\n  parameters: state.parameters\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchUserInfo(score) {\n    dispatch(setUserInfo(score));\n  }\n\n});\n\nconnect(mapStateToProps, mapDispatchToProps)(CheckAnswer);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/commons/utils/ScreenGame.js"],"names":["connect","PropTypes","SCORE_INIT","SCORE_EASY","SCORE_MEDIUM","SCORE_HARD","setUserInfo","CheckAnswer","props","target","player","name","email","score","total","assertions","questions","parameters","Interval","index","useEffect","handleApi","setInterval","setIntervallGame","UM","MIL","clearInterval","console","log","difficulty","isCorrect","getAttribute","includes","newScore","userInfo","localStorage","setItem","JSON","stringify","dispatchUserInfo","clickMe","checkAnswer","propTypes","instanceOf","Object","func","history","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { SCORE_INIT, SCORE_EASY, SCORE_MEDIUM,\n  SCORE_HARD } from '../constants/ScreenGame';\nimport { setUserInfo } from '../../action';\n\nexport function CheckAnswer({ target }, props) {\n  const { player: { name, email, score, total, assertions },\n    questions,\n    parameters: { Interval, index } } = props;\n\n  useEffect(() => {\n    handleApi();\n    setInterval(() => {\n      setIntervallGame((Interval) => Interval - UM);\n    }, MIL);\n    return () => clearInterval(Interval);\n  }, []);\n\n  console.log(`Interval - ${Interval} / index - ${index}`);\n  let difficulty = 0;\n  if (questions[index].difficulty === 'easy') {\n    difficulty = SCORE_EASY;\n  } else if (questions[index].difficulty === 'medium') {\n    difficulty = SCORE_MEDIUM;\n  } else if (questions[index].difficulty === 'hard') {\n    difficulty = SCORE_HARD;\n  }\n\n  const isCorrect = target.getAttribute('data-testid').includes('correct');\n  if (isCorrect) {\n    const newScore = SCORE_INIT + (Interval * difficulty);\n    const userInfo = {\n      name,\n      email,\n      score: score + newScore,\n      total: total + newScore,\n      assertions: assertions + 1,\n    };\n    localStorage.setItem('player', JSON.stringify(userInfo));\n    props.dispatchUserInfo(userInfo);\n  }\n}\n\nexport function clickMe({ target }) {\n  console.log(`Clicou ${target}`);\n}\n\ncheckAnswer.propTypes = {\n  player: PropTypes.instanceOf(Object),\n  dispatchUserInfo: PropTypes.func,\n  history: PropTypes.instanceOf(Object),\n  questions: PropTypes.instanceOf(Object),\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  questions: state.questions,\n  parameters: state.parameters,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchUserInfo(score) {\n    dispatch(setUserInfo(score));\n  },\n});\n\nconnect(mapStateToProps, mapDispatchToProps)(CheckAnswer);\n"]},"metadata":{},"sourceType":"module"}