{"ast":null,"code":"import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { SCORE_INIT, SCORE_EASY, SCORE_MEDIUM, SCORE_HARD } from '../constants/ScreenGame';\nimport { setUserInfo } from '../../action';\nexport function checkAnswer(_ref, props) {\n  let {\n    target\n  } = _ref;\n  const {\n    player: {\n      name,\n      email,\n      score,\n      total,\n      assertions\n    },\n    questions,\n    parameters: {\n      index\n    }\n  } = props;\n  let difficulty = 0;\n\n  if (questions[index].difficulty === 'easy') {\n    difficulty = SCORE_EASY;\n  } else if (questions[index].difficulty === 'medium') {\n    difficulty = SCORE_MEDIUM;\n  } else if (questions[index].difficulty === 'hard') {\n    difficulty = SCORE_HARD;\n  }\n\n  const isCorrect = target.getAttribute('data-testid').includes('correct');\n\n  if (isCorrect) {\n    const newScore = SCORE_INIT + difficulty;\n    const userInfo = {\n      name,\n      email,\n      score: score + newScore,\n      total: total + newScore,\n      assertions: assertions + 1\n    };\n    localStorage.setItem('player', JSON.stringify(userInfo));\n    props.dispatchUserInfo(userInfo);\n  }\n}\nexport function clickMe(_ref2) {\n  let {\n    target\n  } = _ref2;\n  console.log(`Clicou ${target}`);\n}\ncheckAnswer.propTypes = {\n  player: PropTypes.instanceOf(Object),\n  dispatchUserInfo: PropTypes.func,\n  history: PropTypes.instanceOf(Object),\n  questions: PropTypes.instanceOf(Object)\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  questions: state.questions,\n  parameters: state.parameters\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchUserInfo(score) {\n    dispatch(setUserInfo(score));\n  }\n\n});\n\nconnect(mapStateToProps, mapDispatchToProps)(checkAnswer);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/commons/utils/ScreenGame.js"],"names":["connect","PropTypes","SCORE_INIT","SCORE_EASY","SCORE_MEDIUM","SCORE_HARD","setUserInfo","checkAnswer","props","target","player","name","email","score","total","assertions","questions","parameters","index","difficulty","isCorrect","getAttribute","includes","newScore","userInfo","localStorage","setItem","JSON","stringify","dispatchUserInfo","clickMe","console","log","propTypes","instanceOf","Object","func","history","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,YAAjC,EACEC,UADF,QACoB,yBADpB;AAEA,SAASC,WAAT,QAA4B,cAA5B;AAEA,OAAO,SAASC,WAAT,OAAiCC,KAAjC,EAAwC;AAAA,MAAnB;AAAEC,IAAAA;AAAF,GAAmB;AAC7C,QAAM;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,KAAf;AAAsBC,MAAAA,KAAtB;AAA6BC,MAAAA;AAA7B,KAAV;AACJC,IAAAA,SADI;AAEJC,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF;AAFR,MAEsBV,KAF5B;AAIA,MAAIW,UAAU,GAAG,CAAjB;;AACA,MAAIH,SAAS,CAACE,KAAD,CAAT,CAAiBC,UAAjB,KAAgC,MAApC,EAA4C;AAC1CA,IAAAA,UAAU,GAAGhB,UAAb;AACD,GAFD,MAEO,IAAIa,SAAS,CAACE,KAAD,CAAT,CAAiBC,UAAjB,KAAgC,QAApC,EAA8C;AACnDA,IAAAA,UAAU,GAAGf,YAAb;AACD,GAFM,MAEA,IAAIY,SAAS,CAACE,KAAD,CAAT,CAAiBC,UAAjB,KAAgC,MAApC,EAA4C;AACjDA,IAAAA,UAAU,GAAGd,UAAb;AACD;;AAED,QAAMe,SAAS,GAAGX,MAAM,CAACY,YAAP,CAAoB,aAApB,EAAmCC,QAAnC,CAA4C,SAA5C,CAAlB;;AACA,MAAIF,SAAJ,EAAe;AACb,UAAMG,QAAQ,GAAGrB,UAAU,GAAIiB,UAA/B;AACA,UAAMK,QAAQ,GAAG;AACfb,MAAAA,IADe;AAEfC,MAAAA,KAFe;AAGfC,MAAAA,KAAK,EAAEA,KAAK,GAAGU,QAHA;AAIfT,MAAAA,KAAK,EAAEA,KAAK,GAAGS,QAJA;AAKfR,MAAAA,UAAU,EAAEA,UAAU,GAAG;AALV,KAAjB;AAOAU,IAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BC,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAA/B;AACAhB,IAAAA,KAAK,CAACqB,gBAAN,CAAuBL,QAAvB;AACD;AACF;AAED,OAAO,SAASM,OAAT,QAA6B;AAAA,MAAZ;AAAErB,IAAAA;AAAF,GAAY;AAClCsB,EAAAA,OAAO,CAACC,GAAR,CAAa,UAASvB,MAAO,EAA7B;AACD;AAEDF,WAAW,CAAC0B,SAAZ,GAAwB;AACtBvB,EAAAA,MAAM,EAAET,SAAS,CAACiC,UAAV,CAAqBC,MAArB,CADc;AAEtBN,EAAAA,gBAAgB,EAAE5B,SAAS,CAACmC,IAFN;AAGtBC,EAAAA,OAAO,EAAEpC,SAAS,CAACiC,UAAV,CAAqBC,MAArB,CAHa;AAItBnB,EAAAA,SAAS,EAAEf,SAAS,CAACiC,UAAV,CAAqBC,MAArB;AAJW,EAKtBG,UALF;;AAOA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClC9B,EAAAA,MAAM,EAAE8B,KAAK,CAAC9B,MADoB;AAElCM,EAAAA,SAAS,EAAEwB,KAAK,CAACxB,SAFiB;AAGlCC,EAAAA,UAAU,EAAEuB,KAAK,CAACvB;AAHgB,CAAZ,CAAxB;;AAMA,MAAMwB,kBAAkB,GAAIC,QAAD,KAAe;AACxCb,EAAAA,gBAAgB,CAAChB,KAAD,EAAQ;AACtB6B,IAAAA,QAAQ,CAACpC,WAAW,CAACO,KAAD,CAAZ,CAAR;AACD;;AAHuC,CAAf,CAA3B;;AAMAb,OAAO,CAACuC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ClC,WAA7C","sourcesContent":["import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { SCORE_INIT, SCORE_EASY, SCORE_MEDIUM,\n  SCORE_HARD } from '../constants/ScreenGame';\nimport { setUserInfo } from '../../action';\n\nexport function checkAnswer({ target }, props) {\n  const { player: { name, email, score, total, assertions },\n    questions,\n    parameters: { index } } = props;\n\n  let difficulty = 0;\n  if (questions[index].difficulty === 'easy') {\n    difficulty = SCORE_EASY;\n  } else if (questions[index].difficulty === 'medium') {\n    difficulty = SCORE_MEDIUM;\n  } else if (questions[index].difficulty === 'hard') {\n    difficulty = SCORE_HARD;\n  }\n\n  const isCorrect = target.getAttribute('data-testid').includes('correct');\n  if (isCorrect) {\n    const newScore = SCORE_INIT + (difficulty);\n    const userInfo = {\n      name,\n      email,\n      score: score + newScore,\n      total: total + newScore,\n      assertions: assertions + 1,\n    };\n    localStorage.setItem('player', JSON.stringify(userInfo));\n    props.dispatchUserInfo(userInfo);\n  }\n}\n\nexport function clickMe({ target }) {\n  console.log(`Clicou ${target}`);\n}\n\ncheckAnswer.propTypes = {\n  player: PropTypes.instanceOf(Object),\n  dispatchUserInfo: PropTypes.func,\n  history: PropTypes.instanceOf(Object),\n  questions: PropTypes.instanceOf(Object),\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  questions: state.questions,\n  parameters: state.parameters,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchUserInfo(score) {\n    dispatch(setUserInfo(score));\n  },\n});\n\nconnect(mapStateToProps, mapDispatchToProps)(checkAnswer);\n"]},"metadata":{},"sourceType":"module"}