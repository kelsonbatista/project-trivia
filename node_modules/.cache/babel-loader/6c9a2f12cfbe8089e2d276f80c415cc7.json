{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { requestToken, setHandleApi, setParameters } from '../action/index';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { SCORE_INIT, SCORE_EASY, SCORE_MEDIUM, SCORE_HARD } from '../constants/ScreenGame';\nimport { setUserInfo } from '../../action';\nexport function CheckAnswer(_ref, props) {\n  let {\n    target\n  } = _ref;\n  const {\n    player: {\n      name,\n      email,\n      score,\n      total,\n      assertions\n    },\n    questions,\n    handleApi,\n    parameters: {\n      index\n    }\n  } = props;\n  const [Interval, setIntervallGame] = useState(30); // const [btnDisable, setBtnDisable] = useState(true);\n\n  useEffect(() => {\n    handleApi();\n    setInterval(() => {\n      setIntervallGame(Interval => Interval - 1);\n    }, 1000);\n    return () => clearInterval(Interval);\n  }, []); // useEffect(() => {\n  //   if (Interval <= 0) {\n  //     setBtnDisable(true);\n  //   } else {\n  //     setBtnDisable(false);\n  //   }\n  // }, [Interval]);\n\n  console.log(`Interval - ${Interval} / index - ${index}`);\n  let difficulty = 0;\n\n  if (questions[index].difficulty === 'easy') {\n    difficulty = SCORE_EASY;\n  } else if (questions[index].difficulty === 'medium') {\n    difficulty = SCORE_MEDIUM;\n  } else if (questions[index].difficulty === 'hard') {\n    difficulty = SCORE_HARD;\n  }\n\n  const isCorrect = target.getAttribute('data-testid').includes('correct');\n\n  if (isCorrect) {\n    const newScore = SCORE_INIT + Interval * difficulty;\n    const userInfo = {\n      name,\n      email,\n      score: score + newScore,\n      total: total + newScore,\n      assertions: assertions + 1\n    };\n    localStorage.setItem('player', JSON.stringify(userInfo));\n    props.dispatchUserInfo(userInfo);\n  }\n}\nexport function clickMe(_ref2) {\n  let {\n    target\n  } = _ref2;\n  console.log(`Clicou ${target}`);\n}\nCheckAnswer.propTypes = {\n  player: PropTypes.instanceOf(Object),\n  dispatchUserInfo: PropTypes.func,\n  history: PropTypes.instanceOf(Object),\n  questions: PropTypes.instanceOf(Object)\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  questions: state.questions,\n  parameters: state.parameters\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchUserInfo(score) {\n    dispatch(setUserInfo(score));\n  },\n\n  handleApi() {\n    dispatch(setHandleApi());\n  }\n\n});\n\nconnect(mapStateToProps, mapDispatchToProps)(CheckAnswer);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/commons/utils/ScreenGame.js"],"names":["useState","useEffect","requestToken","setHandleApi","setParameters","connect","PropTypes","SCORE_INIT","SCORE_EASY","SCORE_MEDIUM","SCORE_HARD","setUserInfo","CheckAnswer","props","target","player","name","email","score","total","assertions","questions","handleApi","parameters","index","Interval","setIntervallGame","setInterval","clearInterval","console","log","difficulty","isCorrect","getAttribute","includes","newScore","userInfo","localStorage","setItem","JSON","stringify","dispatchUserInfo","clickMe","propTypes","instanceOf","Object","func","history","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { requestToken, setHandleApi, setParameters } from '../action/index';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { SCORE_INIT, SCORE_EASY, SCORE_MEDIUM,\n  SCORE_HARD } from '../constants/ScreenGame';\nimport { setUserInfo } from '../../action';\n\nexport function CheckAnswer({ target }, props) {\n  const { player: { name, email, score, total, assertions },\n    questions,\n    handleApi,\n    parameters: { index } } = props;\n  const [Interval, setIntervallGame] = useState(30);\n  // const [btnDisable, setBtnDisable] = useState(true);\n  useEffect(() => {\n    handleApi();\n    setInterval(() => {\n      setIntervallGame((Interval) => Interval - 1);\n    }, 1000);\n    return () => clearInterval(Interval);\n  }, []);\n\n  // useEffect(() => {\n  //   if (Interval <= 0) {\n  //     setBtnDisable(true);\n  //   } else {\n  //     setBtnDisable(false);\n  //   }\n  // }, [Interval]);\n\n  console.log(`Interval - ${Interval} / index - ${index}`);\n  let difficulty = 0;\n  if (questions[index].difficulty === 'easy') {\n    difficulty = SCORE_EASY;\n  } else if (questions[index].difficulty === 'medium') {\n    difficulty = SCORE_MEDIUM;\n  } else if (questions[index].difficulty === 'hard') {\n    difficulty = SCORE_HARD;\n  }\n\n  const isCorrect = target.getAttribute('data-testid').includes('correct');\n  if (isCorrect) {\n    const newScore = SCORE_INIT + (Interval * difficulty);\n    const userInfo = {\n      name,\n      email,\n      score: score + newScore,\n      total: total + newScore,\n      assertions: assertions + 1,\n    };\n    localStorage.setItem('player', JSON.stringify(userInfo));\n    props.dispatchUserInfo(userInfo);\n  }\n}\n\nexport function clickMe({ target }) {\n  console.log(`Clicou ${target}`);\n}\n\nCheckAnswer.propTypes = {\n  player: PropTypes.instanceOf(Object),\n  dispatchUserInfo: PropTypes.func,\n  history: PropTypes.instanceOf(Object),\n  questions: PropTypes.instanceOf(Object),\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  questions: state.questions,\n  parameters: state.parameters,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchUserInfo(score) {\n    dispatch(setUserInfo(score));\n  },\n  handleApi() {\n    dispatch(setHandleApi());\n  },\n});\n\nconnect(mapStateToProps, mapDispatchToProps)(CheckAnswer);\n"]},"metadata":{},"sourceType":"module"}