{"ast":null,"code":"var _jsxFileName = \"/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { decode } from 'he';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport { requestToken, setPlayer } from '../../store/actions';\nimport fetchToken from '../../services/token';\nimport Loading from '../../components/Loading';\nimport { HALF, ONE, TWO, THREE, FOUR, TEN, THIRTY, THOUSAND } from '../../commons/constants';\nimport './style.css';\nimport logo from '../../assets/images/logo.png';\nimport './audio';\nconst entrada = new Audio('./../../assets/audios/entrada.mp3');\n\nfunction handlePlay(audio) {\n  audio.currentTime = 0;\n  return audio.play();\n}\n\nfunction Game(props) {\n  const interval = useRef();\n  const {\n    dispatchPlayer,\n    dispatchToken,\n    history,\n    player: {\n      name,\n      assertions,\n      score,\n      total,\n      gravatarEmail\n    },\n    token\n  } = props;\n  const [questions, setQuestions] = useState([]); // const [newQuestionSound, setNewQuestionSound] = useState(0);\n\n  const [countQuestions, setCountQuestions] = useState(0);\n  const [index, setIndex] = useState(0);\n  const [timer, setTimer] = useState(THIRTY);\n  const [timeEnd, setTimeEnd] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [answerIncorrect, setAnswerIncorrect] = useState(false);\n  const [answerCorrect, setAnswerCorrect] = useState(false);\n  const [answers, setAnswers] = useState({\n    correct: '',\n    incorrect: [],\n    all: []\n  });\n\n  async function handleTrivia() {\n    setLoading(true);\n    let fetchTrivia = await fetchTriviaApi(token);\n\n    if (fetchTrivia.response_code === THREE) {\n      const tokenInfo = await fetchToken();\n      dispatchToken(tokenInfo.token);\n      fetchTrivia = await fetchTriviaApi(tokenInfo.token);\n    }\n\n    setQuestions(fetchTrivia.results);\n    setLoading(false);\n  }\n\n  function handleAnswers() {\n    if (questions.length > 0) {\n      const {\n        correct_answer: correct,\n        incorrect_answers: incorrect\n      } = questions[index]; // https://flaviocopes.com/how-to-shuffle-array-javascript/\n\n      let all = [correct, ...incorrect];\n      all = all.sort(() => Math.random() - HALF);\n      setAnswers({ ...answers,\n        correct,\n        incorrect,\n        all\n      });\n    }\n  } // https://stackoverflow.com/questions/71184843/how-to-update-state-using-setinterval-on-functional-components-in-react/71185514#71185514\n\n\n  function handleTimer() {\n    // interval useRef para funcionar\n    function runTimer() {\n      interval.current = setInterval(() => {\n        setTimer(count => count - 1);\n      }, THOUSAND);\n    }\n\n    if (timer <= 0 && interval.current) {\n      setDisabled(true);\n      setTimeEnd(true);\n      clearInterval(interval.current);\n    }\n\n    if (timer === THIRTY) {\n      runTimer();\n    }\n  }\n\n  function calcScore() {\n    const level = questions[index].difficulty;\n    if (level === 'hard') return THREE;\n    if (level === 'medium') return TWO;\n    return ONE;\n  }\n\n  function handleClick(_ref) {\n    let {\n      target\n    } = _ref;\n    const correct = target.getAttribute('data-testid').includes('correct');\n\n    if (correct) {\n      const player = {\n        name,\n        assertions: assertions + 1,\n        score: TEN + timer * calcScore(),\n        total: total + (TEN + timer * calcScore()),\n        gravatarEmail\n      };\n      dispatchPlayer(player);\n      setAnswerCorrect(true);\n    } else {\n      setAnswerIncorrect(true);\n    }\n\n    setDisabled(true);\n    clearInterval(interval.current);\n  }\n\n  function handleNext() {\n    // const player = {\n    //   name,\n    //   assertions,\n    //   score: 0,\n    //   total,\n    //   gravatarEmail,\n    // };\n    // dispatchPlayer(player);\n    setCountQuestions(countQuestions + 1);\n    setIndex(index + 1);\n    setDisabled(false);\n    setAnswerIncorrect(false);\n    setAnswerCorrect(false);\n    setTimer(THIRTY);\n    handleAnswers();\n\n    if (countQuestions === FOUR) {\n      setCountQuestions(0);\n      history.push('/feedback');\n    }\n  }\n\n  useEffect(() => {\n    // did mount\n    handleTrivia();\n  }, []);\n  useEffect(() => {\n    // did update\n    handleAnswers();\n    console.log(entrada);\n    entrada.play();\n  }, [index, questions]);\n  useEffect(() => {\n    // did update\n    handleTimer();\n  }, [timer]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    alt: \"Logo\",\n    className: \"game__logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"game__score\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, `Pontos: ${score}`), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"game__total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, `Total: ${total}`), questions.length > 0 && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"game__category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, decode(questions[index].category)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__timer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, \"\\xA0\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, timer))), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, loading && /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 24\n    }\n  }), questions.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__question\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"question-text\",\n    className: \"game__text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, decode(questions[index].question))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__answers\",\n    \"data-testid\": \"answer-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 15\n    }\n  }, answers.all.map((answer, item) => /*#__PURE__*/React.createElement(Button, {\n    className: answer === answers.correct ? 'correct game__answer-txt' : 'incorrect game__answer-txt',\n    dataTestid: answer === answers.correct ? 'correct-answer' : `wrong-answer-${item}`,\n    disabled: disabled,\n    index: item,\n    key: item,\n    onClick: event => handleClick(event),\n    text: decode(answer),\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 15\n    }\n  }, disabled && timeEnd && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"msg__timeup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 20\n    }\n  }, \"Tempo esgotado! Resposta inv\\xE1lida.\"), disabled && answerIncorrect && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"msg__wrong\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 22\n    }\n  }, \"Infelizmente voc\\xEA errou!\"), disabled && answerCorrect && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"msg__right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 20\n    }\n  }, \"Parab\\xE9ns! Voc\\xEA acertou!\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableApp, {\n    className: \"game__profile-name\",\n    classPicture: \"game__profile-picture\",\n    classPictureImage: \"game__profile-image\",\n    classScore: \"game__profile-score\",\n    classTable: \"game__profile\",\n    name: name,\n    score: score,\n    gravatarEmail: gravatarEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }), disabled && /*#__PURE__*/React.createElement(Button, {\n    className: \"next\",\n    dataTestid: \"btn-next\",\n    onClick: () => handleNext(),\n    text: \"Next\",\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }\n  }, \"\\xA0\"));\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n  token: PropTypes.string,\n  history: PropTypes.instanceOf(Object)\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  token: state.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchToken: tokenInfo => dispatch(requestToken(tokenInfo)),\n  dispatchPlayer: player => dispatch(setPlayer(player))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx"],"names":["React","useState","useEffect","useRef","PropTypes","connect","decode","fetchTriviaApi","TableApp","Button","requestToken","setPlayer","fetchToken","Loading","HALF","ONE","TWO","THREE","FOUR","TEN","THIRTY","THOUSAND","logo","entrada","Audio","handlePlay","audio","currentTime","play","Game","props","interval","dispatchPlayer","dispatchToken","history","player","name","assertions","score","total","gravatarEmail","token","questions","setQuestions","countQuestions","setCountQuestions","index","setIndex","timer","setTimer","timeEnd","setTimeEnd","disabled","setDisabled","loading","setLoading","answerIncorrect","setAnswerIncorrect","answerCorrect","setAnswerCorrect","answers","setAnswers","correct","incorrect","all","handleTrivia","fetchTrivia","response_code","tokenInfo","results","handleAnswers","length","correct_answer","incorrect_answers","sort","Math","random","handleTimer","runTimer","current","setInterval","count","clearInterval","calcScore","level","difficulty","handleClick","target","getAttribute","includes","handleNext","push","console","log","category","question","map","answer","item","event","propTypes","string","number","instanceOf","Object","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { decode } from 'he';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport { requestToken, setPlayer } from '../../store/actions';\nimport fetchToken from '../../services/token';\nimport Loading from '../../components/Loading';\nimport { HALF, ONE, TWO, THREE, FOUR,\n  TEN, THIRTY, THOUSAND } from '../../commons/constants';\nimport './style.css';\nimport logo from '../../assets/images/logo.png';\nimport './audio';\n\nconst entrada = new Audio('./../../assets/audios/entrada.mp3');\n\nfunction handlePlay(audio) {\n  audio.currentTime = 0;\n  return audio.play();\n}\n\nfunction Game(props) {\n  const interval = useRef();\n  const { dispatchPlayer, dispatchToken, history,\n    player: { name, assertions, score, total, gravatarEmail }, token } = props;\n  const [questions, setQuestions] = useState([]);\n  // const [newQuestionSound, setNewQuestionSound] = useState(0);\n  const [countQuestions, setCountQuestions] = useState(0);\n  const [index, setIndex] = useState(0);\n  const [timer, setTimer] = useState(THIRTY);\n  const [timeEnd, setTimeEnd] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [answerIncorrect, setAnswerIncorrect] = useState(false);\n  const [answerCorrect, setAnswerCorrect] = useState(false);\n  const [answers, setAnswers] = useState({\n    correct: '',\n    incorrect: [],\n    all: [],\n  });\n\n  async function handleTrivia() {\n    setLoading(true);\n    let fetchTrivia = await fetchTriviaApi(token);\n    if (fetchTrivia.response_code === THREE) {\n      const tokenInfo = await fetchToken();\n      dispatchToken(tokenInfo.token);\n      fetchTrivia = await fetchTriviaApi(tokenInfo.token);\n    }\n    setQuestions(fetchTrivia.results);\n    setLoading(false);\n  }\n\n  function handleAnswers() {\n    if (questions.length > 0) {\n      const {\n        correct_answer: correct,\n        incorrect_answers: incorrect,\n      } = questions[index];\n      // https://flaviocopes.com/how-to-shuffle-array-javascript/\n      let all = [correct, ...incorrect];\n      all = all.sort(() => Math.random() - HALF);\n      setAnswers({\n        ...answers,\n        correct,\n        incorrect,\n        all,\n      });\n    }\n  }\n\n  // https://stackoverflow.com/questions/71184843/how-to-update-state-using-setinterval-on-functional-components-in-react/71185514#71185514\n  function handleTimer() { // interval useRef para funcionar\n    function runTimer() {\n      interval.current = setInterval(() => {\n        setTimer((count) => count - 1);\n      }, THOUSAND);\n    }\n    if (timer <= 0 && interval.current) {\n      setDisabled(true);\n      setTimeEnd(true);\n      clearInterval(interval.current);\n    }\n    if (timer === THIRTY) {\n      runTimer();\n    }\n  }\n\n  function calcScore() {\n    const level = questions[index].difficulty;\n    if (level === 'hard') return THREE;\n    if (level === 'medium') return TWO;\n    return ONE;\n  }\n\n  function handleClick({ target }) {\n    const correct = target.getAttribute('data-testid').includes('correct');\n    if (correct) {\n      const player = {\n        name,\n        assertions: assertions + 1,\n        score: TEN + (timer * calcScore()),\n        total: total + (TEN + (timer * calcScore())),\n        gravatarEmail,\n      };\n      dispatchPlayer(player);\n      setAnswerCorrect(true);\n    } else {\n      setAnswerIncorrect(true);\n    }\n    setDisabled(true);\n    clearInterval(interval.current);\n  }\n\n  function handleNext() {\n    // const player = {\n    //   name,\n    //   assertions,\n    //   score: 0,\n    //   total,\n    //   gravatarEmail,\n    // };\n    // dispatchPlayer(player);\n    setCountQuestions(countQuestions + 1);\n    setIndex(index + 1);\n    setDisabled(false);\n    setAnswerIncorrect(false);\n    setAnswerCorrect(false);\n    setTimer(THIRTY);\n    handleAnswers();\n    if (countQuestions === FOUR) {\n      setCountQuestions(0);\n      history.push('/feedback');\n    }\n  }\n\n  useEffect(() => { // did mount\n    handleTrivia();\n  }, []);\n\n  useEffect(() => { // did update\n    handleAnswers();\n    console.log(entrada);\n    entrada.play();\n  }, [index, questions]);\n\n  useEffect(() => { // did update\n    handleTimer();\n  }, [timer]);\n\n  return (\n    <div className=\"game\">\n      <div className=\"game__left\">\n        <header>\n          <img src={ logo } alt=\"Logo\" className=\"game__logo\" />\n          <div>\n            <p className=\"game__score\">{ `Pontos: ${score}` }</p>\n            <p className=\"game__total\">{ `Total: ${total}` }</p>\n            { questions.length > 0 && (\n              <span className=\"game__category\">\n                <p data-testid=\"question-category\">\n                  { decode(questions[index].category) }\n                </p>\n              </span>\n            ) }\n          </div>\n          <div className=\"game__timer\">\n            <div className=\"game__circle\">&nbsp;</div>\n            <span>{ timer }</span>\n          </div>\n        </header>\n        <main>\n          { loading && <Loading />}\n          { questions.length > 0 && (\n            <div>\n              <div className=\"game__question\">\n                <div data-testid=\"question-text\" className=\"game__text\">\n                  {/* { setNewQuestionSound(1) } */}\n                  { decode(questions[index].question) }\n                </div>\n              </div>\n              <div className=\"game__answers\" data-testid=\"answer-options\">\n                { /* // https://flaviocopes.com/how-to-shuffle-array-javascript/ */}\n                { answers.all.map((answer, item) => (\n                  <Button\n                    className={ ((answer === answers.correct)\n                      ? 'correct game__answer-txt'\n                      : 'incorrect game__answer-txt') }\n                    dataTestid={ (answer === answers.correct\n                      ? 'correct-answer'\n                      : `wrong-answer-${item}`) }\n                    disabled={ disabled }\n                    index={ item }\n                    key={ item }\n                    onClick={ (event) => handleClick(event) }\n                    text={ decode(answer) }\n                    type=\"button\"\n                  />\n                )) }\n              </div>\n              <div className=\"game__messages\">\n                { (disabled && timeEnd)\n                && <p className=\"msg__timeup\">Tempo esgotado! Resposta inválida.</p>}\n                { (disabled && answerIncorrect)\n                  && <p className=\"msg__wrong\">Infelizmente você errou!</p>}\n                { (disabled && answerCorrect)\n                && <p className=\"msg__right\">Parabéns! Você acertou!</p>}\n              </div>\n            </div>\n          )}\n          <div className=\"game__footer\">\n            <TableApp\n              className=\"game__profile-name\"\n              classPicture=\"game__profile-picture\"\n              classPictureImage=\"game__profile-image\"\n              classScore=\"game__profile-score\"\n              classTable=\"game__profile\"\n              name={ name }\n              score={ score }\n              gravatarEmail={ gravatarEmail }\n            />\n            { disabled && (\n              <Button\n                className=\"next\"\n                dataTestid=\"btn-next\"\n                onClick={ () => handleNext() }\n                text=\"Next\"\n                type=\"button\"\n              />\n            )}\n          </div>\n        </main>\n      </div>\n      <div className=\"game__right\">\n        &nbsp;\n      </div>\n    </div>\n  );\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n  token: PropTypes.string,\n  history: PropTypes.instanceOf(Object),\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  token: state.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchToken: (tokenInfo) => dispatch(requestToken(tokenInfo)),\n  dispatchPlayer: (player) => dispatch(setPlayer(player)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}