{"ast":null,"code":"var _jsxFileName = \"/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Login.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport { Rached, Token, requestToken, setUserInfo } from '../action/index';\n\nfunction Login(props) {\n  const [inputName, setInputName] = useState('');\n  const [inputEmail, setInputEmail] = useState('');\n  const [disable, setDisable] = useState(true);\n  const rached = md5(inputEmail).toString();\n  useEffect(() => {\n    if (inputName !== '' && inputEmail !== '') {\n      setDisable(false);\n    } else {\n      setDisable(true);\n    }\n  }, [inputName, inputEmail]);\n\n  function userData() {\n    const userInfo = {\n      name: inputName,\n      email: inputEmail,\n      score: 0,\n      total: 0,\n      assertions: 0\n    };\n    localStorage.setItem('player', JSON.stringify(userInfo));\n    props.dispatchUserInfo(userInfo);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => props.RequestToken(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"teste\"), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, \"Name:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    \"data-testid\": \"input-player-name\",\n    id: \"name-input\",\n    value: inputName,\n    onChange: event => {\n      setInputName(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Email:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    id: \"email-input\",\n    \"data-testid\": \"input-gravatar-email\",\n    value: inputEmail,\n    onChange: event => {\n      setInputEmail(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"btn-play\",\n    disabled: disable,\n    onClick: () => {\n      props.RequestToken();\n      props.infoHeader(rached);\n      userData();\n      const {\n        history\n      } = props;\n      history.push('/screengame');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"btn-settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"Configura\\xE7oes\"), /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"settings-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, \"Configura\\xE7oes\"));\n}\n\nconst mapDispatchToProps = dispatch => ({\n  infoHeader(e) {\n    dispatch(Rached(e));\n  },\n\n  Token(e) {\n    dispatch(Token(e));\n  },\n\n  RequestToken(e) {\n    dispatch(requestToken(e));\n  },\n\n  dispatchUserInfo(e) {\n    dispatch(setUserInfo(e));\n  }\n\n});\n\nLogin.propTypes = {\n  infoHeader: PropTypes.func.isRequired,\n  RequestToken: PropTypes.func.isRequired,\n  history: PropTypes.instanceOf(Object).isRequired,\n  dispatchUserInfo: PropTypes.func.isRequired\n};\nexport default connect(null, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Login.jsx"],"names":["React","useState","useEffect","PropTypes","md5","connect","Rached","Token","requestToken","setUserInfo","Login","props","inputName","setInputName","inputEmail","setInputEmail","disable","setDisable","rached","toString","userData","userInfo","name","email","score","total","assertions","localStorage","setItem","JSON","stringify","dispatchUserInfo","RequestToken","event","target","value","infoHeader","history","push","mapDispatchToProps","dispatch","e","propTypes","func","isRequired","instanceOf","Object"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport { Rached, Token, requestToken, setUserInfo } from '../action/index';\n\nfunction Login(props) {\n  const [inputName, setInputName] = useState('');\n  const [inputEmail, setInputEmail] = useState('');\n  const [disable, setDisable] = useState(true);\n  const rached = md5(inputEmail).toString();\n\n  useEffect(() => {\n    if (inputName !== '' && inputEmail !== '') {\n      setDisable(false);\n    } else {\n      setDisable(true);\n    }\n  }, [inputName, inputEmail]);\n\n  function userData() {\n    const userInfo = {\n      name: inputName,\n      email: inputEmail,\n      score: 0,\n      total: 0,\n      assertions: 0,\n    };\n\n    localStorage.setItem('player', JSON.stringify(userInfo));\n\n    props.dispatchUserInfo(userInfo);\n  }\n\n  return (\n    <div>\n\n\n      <button\n        type=\"button\"\n        onClick={ () => props.RequestToken() }\n      >\n        teste\n      </button>\n\n      <label htmlFor=\"name-input\">\n        Name:\n        <input\n          type=\"text\"\n          data-testid=\"input-player-name\"\n          id=\"name-input\"\n          value={ inputName }\n          onChange={ (event) => {\n            setInputName(event.target.value);\n          } }\n        />\n      </label>\n      <label htmlFor=\"email-input\">\n        Email:\n        <input\n          type=\"email\"\n          id=\"email-input\"\n          data-testid=\"input-gravatar-email\"\n          value={ inputEmail }\n          onChange={ (event) => {\n            setInputEmail(event.target.value);\n          } }\n        />\n      </label>\n      <button\n        type=\"button\"\n        data-testid=\"btn-play\"\n        disabled={ disable }\n        onClick={ () => {\n          props.RequestToken();\n          props.infoHeader(rached);\n          userData();\n          const { history } = props;\n          history.push('/screengame');\n        } }\n      >\n        Play\n      </button>\n      <button type=\"button\" data-testid=\"btn-settings\">\n        Configuraçoes\n      </button>\n      <h2 data-testid=\"settings-title\">Configuraçoes</h2>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  infoHeader(e) {\n    dispatch(Rached(e));\n  },\n  Token(e) {\n    dispatch(Token(e));\n  },\n  RequestToken(e) {\n    dispatch(requestToken(e));\n  },\n  dispatchUserInfo(e) {\n    dispatch(setUserInfo(e));\n  },\n});\n\nLogin.propTypes = {\n  infoHeader: PropTypes.func.isRequired,\n  RequestToken: PropTypes.func.isRequired,\n  history: PropTypes.instanceOf(Object).isRequired,\n  dispatchUserInfo: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}