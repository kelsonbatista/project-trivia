{"ast":null,"code":"import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { SCORE_INIT, SCORE_EASY, SCORE_MEDIUM, SCORE_HARD } from '../constants/ScreenGame';\nimport { setUserInfo } from '../../action';\nexport function checkAnswer(_ref, props) {\n  let {\n    target\n  } = _ref;\n  const {\n    player: {\n      name,\n      email,\n      score,\n      total,\n      assertions\n    },\n    questions,\n    parameters: {\n      Interval,\n      index\n    }\n  } = props;\n  return `Interval - ${Interval} / index - ${index}`; // let difficulty = 0;\n  // if (questions[index].difficulty === 'easy') {\n  //   difficulty = SCORE_EASY;\n  // } else if (questions[index].difficulty === 'medium') {\n  //   difficulty = SCORE_MEDIUM;\n  // } else if (questions[index].difficulty === 'hard') {\n  //   difficulty = SCORE_HARD;\n  // }\n  // const isCorrect = target.getAttribute('data-testid').includes('correct');\n  // if (isCorrect) {\n  //   const newScore = SCORE_INIT + (Interval * difficulty);\n  //   const userInfo = {\n  //     name,\n  //     email,\n  //     score: score + newScore,\n  //     total: total + newScore,\n  //     assertions: assertions + 1,\n  //   };\n  //   localStorage.setItem('player', JSON.stringify(userInfo));\n  //   props.dispatchUserInfo(userInfo);\n  // }\n}\nexport function clickMe(_ref2) {\n  let {\n    target\n  } = _ref2;\n  console.log(`Clicou ${target}`);\n}\ncheckAnswer.propTypes = {\n  player: PropTypes.instanceOf(Object),\n  dispatchUserInfo: PropTypes.func,\n  history: PropTypes.instanceOf(Object),\n  questions: PropTypes.instanceOf(Object)\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  questions: state.questions,\n  parameters: state.parameters\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchUserInfo(score) {\n    dispatch(setUserInfo(score));\n  }\n\n});\n\nconnect(mapStateToProps, mapDispatchToProps)(checkAnswer);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/commons/utils/ScreenGame.js"],"names":["connect","PropTypes","SCORE_INIT","SCORE_EASY","SCORE_MEDIUM","SCORE_HARD","setUserInfo","checkAnswer","props","target","player","name","email","score","total","assertions","questions","parameters","Interval","index","clickMe","console","log","propTypes","instanceOf","Object","dispatchUserInfo","func","history","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,YAAjC,EACEC,UADF,QACoB,yBADpB;AAEA,SAASC,WAAT,QAA4B,cAA5B;AAEA,OAAO,SAASC,WAAT,OAAiCC,KAAjC,EAAwC;AAAA,MAAnB;AAAEC,IAAAA;AAAF,GAAmB;AAC7C,QAAM;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,KAAf;AAAsBC,MAAAA,KAAtB;AAA6BC,MAAAA;AAA7B,KAAV;AACJC,IAAAA,SADI;AAEJC,IAAAA,UAAU,EAAE;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ;AAFR,MAEgCX,KAFtC;AAGA,SAAS,cAAaU,QAAS,cAAaC,KAAM,EAAlD,CAJ6C,CAK7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AAED,OAAO,SAASC,OAAT,QAA6B;AAAA,MAAZ;AAAEX,IAAAA;AAAF,GAAY;AAClCY,EAAAA,OAAO,CAACC,GAAR,CAAa,UAASb,MAAO,EAA7B;AACD;AAEDF,WAAW,CAACgB,SAAZ,GAAwB;AACtBb,EAAAA,MAAM,EAAET,SAAS,CAACuB,UAAV,CAAqBC,MAArB,CADc;AAEtBC,EAAAA,gBAAgB,EAAEzB,SAAS,CAAC0B,IAFN;AAGtBC,EAAAA,OAAO,EAAE3B,SAAS,CAACuB,UAAV,CAAqBC,MAArB,CAHa;AAItBT,EAAAA,SAAS,EAAEf,SAAS,CAACuB,UAAV,CAAqBC,MAArB;AAJW,EAKtBI,UALF;;AAOA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCrB,EAAAA,MAAM,EAAEqB,KAAK,CAACrB,MADoB;AAElCM,EAAAA,SAAS,EAAEe,KAAK,CAACf,SAFiB;AAGlCC,EAAAA,UAAU,EAAEc,KAAK,CAACd;AAHgB,CAAZ,CAAxB;;AAMA,MAAMe,kBAAkB,GAAIC,QAAD,KAAe;AACxCP,EAAAA,gBAAgB,CAACb,KAAD,EAAQ;AACtBoB,IAAAA,QAAQ,CAAC3B,WAAW,CAACO,KAAD,CAAZ,CAAR;AACD;;AAHuC,CAAf,CAA3B;;AAMAb,OAAO,CAAC8B,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CzB,WAA7C","sourcesContent":["import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { SCORE_INIT, SCORE_EASY, SCORE_MEDIUM,\n  SCORE_HARD } from '../constants/ScreenGame';\nimport { setUserInfo } from '../../action';\n\nexport function checkAnswer({ target }, props) {\n  const { player: { name, email, score, total, assertions },\n    questions,\n    parameters: { Interval, index } } = props;\n  return (`Interval - ${Interval} / index - ${index}`);\n  // let difficulty = 0;\n  // if (questions[index].difficulty === 'easy') {\n  //   difficulty = SCORE_EASY;\n  // } else if (questions[index].difficulty === 'medium') {\n  //   difficulty = SCORE_MEDIUM;\n  // } else if (questions[index].difficulty === 'hard') {\n  //   difficulty = SCORE_HARD;\n  // }\n\n  // const isCorrect = target.getAttribute('data-testid').includes('correct');\n  // if (isCorrect) {\n  //   const newScore = SCORE_INIT + (Interval * difficulty);\n  //   const userInfo = {\n  //     name,\n  //     email,\n  //     score: score + newScore,\n  //     total: total + newScore,\n  //     assertions: assertions + 1,\n  //   };\n  //   localStorage.setItem('player', JSON.stringify(userInfo));\n  //   props.dispatchUserInfo(userInfo);\n  // }\n}\n\nexport function clickMe({ target }) {\n  console.log(`Clicou ${target}`);\n}\n\ncheckAnswer.propTypes = {\n  player: PropTypes.instanceOf(Object),\n  dispatchUserInfo: PropTypes.func,\n  history: PropTypes.instanceOf(Object),\n  questions: PropTypes.instanceOf(Object),\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  questions: state.questions,\n  parameters: state.parameters,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchUserInfo(score) {\n    dispatch(setUserInfo(score));\n  },\n});\n\nconnect(mapStateToProps, mapDispatchToProps)(checkAnswer);\n"]},"metadata":{},"sourceType":"module"}