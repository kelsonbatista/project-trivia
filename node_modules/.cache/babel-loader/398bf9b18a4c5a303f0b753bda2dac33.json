{"ast":null,"code":"var _jsxFileName = \"/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport { requestToken, setPlayer } from '../../store/actions';\nimport fetchToken from '../../services/token';\nimport Loading from '../../components/Loading';\nimport './style.css';\n\nfunction Game(props) {\n  const HALF = 0.5;\n  const ONE = 1;\n  const TWO = 2;\n  const THREE = 3;\n  const TEN = 10;\n  const THIRTY = 30;\n  const THOUSAND = 1000;\n  const interval = useRef();\n  const {\n    dispatchPlayer,\n    dispatchToken,\n    player: {\n      name,\n      gravatarEmail\n    },\n    token\n  } = props;\n  const [questions, setQuestions] = useState([]);\n  const [index, setIndex] = useState(0);\n  const [timer, setTimer] = useState(THIRTY);\n  const [disabled, setDisabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [player, setPlayerState] = useState({\n    name,\n    assertions: 0,\n    score: 0,\n    gravatarEmail\n  });\n  const [answers, setAnswers] = useState({\n    correct: '',\n    incorrect: [],\n    all: []\n  });\n\n  async function handleTrivia() {\n    setLoading(true);\n    let fetchTrivia = await fetchTriviaApi(token);\n\n    if (fetchTrivia.response_code === THREE) {\n      const tokenInfo = await fetchToken();\n      dispatchToken(tokenInfo.token);\n      fetchTrivia = await fetchTriviaApi(tokenInfo.token);\n    }\n\n    setQuestions(fetchTrivia.results);\n    setLoading(false);\n  }\n\n  function handleAnswers() {\n    if (questions.length > 0) {\n      const {\n        correct_answer: correct,\n        incorrect_answers: incorrect\n      } = questions[index]; // https://flaviocopes.com/how-to-shuffle-array-javascript/\n\n      let all = [correct, ...incorrect];\n      all = all.sort(() => Math.random() - HALF);\n      setAnswers({ ...answers,\n        correct,\n        incorrect,\n        all\n      });\n    }\n  } // https://stackoverflow.com/questions/71184843/how-to-update-state-using-setinterval-on-functional-components-in-react/71185514#71185514\n\n\n  function handleTimer() {\n    // interval useRef para funcionar\n    function runTimer() {\n      interval.current = setInterval(() => {\n        setTimer(count => count - 1);\n      }, THOUSAND);\n    }\n\n    if (timer <= 0 && interval.current) {\n      setDisabled(true);\n      clearInterval(interval.current);\n    }\n\n    if (timer === THIRTY) {\n      runTimer();\n    }\n  }\n\n  function handleClick(_ref) {\n    let {\n      target\n    } = _ref;\n    const id = target.getAttribute('data-testid').includes('correct');\n    let points = 0;\n\n    if (id) {\n      const level = questions[index].difficulty;\n      if (level === 'hard') points = THREE;else if (level === 'medium') points = TWO;else points = ONE;\n      return setPlayerState(() => ({ ...player,\n        assertions: player.assertions + 1,\n        score: player.score + (TEN + timer * points)\n      })); // dispatchPlayer(player);\n    }\n\n    console.log('click');\n  }\n\n  useEffect(() => {\n    // did mount\n    handleTrivia();\n  }, []);\n  useEffect(() => {\n    // did update\n    handleAnswers();\n  }, [questions]);\n  useEffect(() => {\n    // did update\n    handleTimer();\n  }, [timer]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"TRIVIA\"), /*#__PURE__*/React.createElement(TableApp, {\n    name: name,\n    score: player.score,\n    gravatarEmail: gravatarEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, loading && /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 22\n    }\n  }), questions.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, `Category: ${questions[index].category}`), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, `Time: ${timer}`), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, questions[index].question), /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"answer-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, answers.all.map((answer, item) => {\n    if (answer === answers.correct) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"correct\",\n        dataTestid: \"correct-answer\",\n        disabled: disabled,\n        onClick: event => handleClick(event),\n        text: answers.correct,\n        type: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 23\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"incorrect\",\n      dataTestid: `wrong-answer-${item}`,\n      disabled: disabled,\n      onClick: event => handleClick(event),\n      text: answer,\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }\n    }));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, disabled ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"msg__wrong\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 19\n    }\n  }, \"Tempo esgotado! Resposta inv\\xE1lida.\") : /*#__PURE__*/React.createElement(\"p\", {\n    className: \"msg__correct\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 19\n    }\n  }, `Pontos: ${player.score}`)))));\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n  token: PropTypes.string\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  token: state.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchToken: tokenInfo => dispatch(requestToken(tokenInfo)),\n  dispatchPlayer: player => dispatch(setPlayer(player))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx"],"names":["React","useState","useEffect","useRef","PropTypes","connect","fetchTriviaApi","TableApp","Button","requestToken","setPlayer","fetchToken","Loading","Game","props","HALF","ONE","TWO","THREE","TEN","THIRTY","THOUSAND","interval","dispatchPlayer","dispatchToken","player","name","gravatarEmail","token","questions","setQuestions","index","setIndex","timer","setTimer","disabled","setDisabled","loading","setLoading","setPlayerState","assertions","score","answers","setAnswers","correct","incorrect","all","handleTrivia","fetchTrivia","response_code","tokenInfo","results","handleAnswers","length","correct_answer","incorrect_answers","sort","Math","random","handleTimer","runTimer","current","setInterval","count","clearInterval","handleClick","target","id","getAttribute","includes","points","level","difficulty","console","log","category","question","map","answer","item","event","propTypes","string","number","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport { requestToken, setPlayer } from '../../store/actions';\nimport fetchToken from '../../services/token';\nimport Loading from '../../components/Loading';\nimport './style.css';\n\nfunction Game(props) {\n  const HALF = 0.5;\n  const ONE = 1;\n  const TWO = 2;\n  const THREE = 3;\n  const TEN = 10;\n  const THIRTY = 30;\n  const THOUSAND = 1000;\n  const interval = useRef();\n  const { dispatchPlayer, dispatchToken, player: { name, gravatarEmail }, token } = props;\n  const [questions, setQuestions] = useState([]);\n  const [index, setIndex] = useState(0);\n  const [timer, setTimer] = useState(THIRTY);\n  const [disabled, setDisabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [player, setPlayerState] = useState({\n    name,\n    assertions: 0,\n    score: 0,\n    gravatarEmail,\n  });\n  const [answers, setAnswers] = useState({\n    correct: '',\n    incorrect: [],\n    all: [],\n  });\n\n  async function handleTrivia() {\n    setLoading(true);\n    let fetchTrivia = await fetchTriviaApi(token);\n    if (fetchTrivia.response_code === THREE) {\n      const tokenInfo = await fetchToken();\n      dispatchToken(tokenInfo.token);\n      fetchTrivia = await fetchTriviaApi(tokenInfo.token);\n    }\n    setQuestions(fetchTrivia.results);\n    setLoading(false);\n  }\n\n  function handleAnswers() {\n    if (questions.length > 0) {\n      const {\n        correct_answer: correct,\n        incorrect_answers: incorrect,\n      } = questions[index];\n      // https://flaviocopes.com/how-to-shuffle-array-javascript/\n      let all = [correct, ...incorrect];\n      all = all.sort(() => Math.random() - HALF);\n      setAnswers({\n        ...answers,\n        correct,\n        incorrect,\n        all,\n      });\n    }\n  }\n\n  // https://stackoverflow.com/questions/71184843/how-to-update-state-using-setinterval-on-functional-components-in-react/71185514#71185514\n  function handleTimer() { // interval useRef para funcionar\n    function runTimer() {\n      interval.current = setInterval(() => {\n        setTimer((count) => count - 1);\n      }, THOUSAND);\n    }\n    if (timer <= 0 && interval.current) {\n      setDisabled(true);\n      clearInterval(interval.current);\n    }\n    if (timer === THIRTY) {\n      runTimer();\n    }\n  }\n\n  function handleClick({ target }) {\n    const id = target.getAttribute('data-testid').includes('correct');\n    let points = 0;\n    if (id) {\n      const level = questions[index].difficulty;\n      if (level === 'hard') points = THREE;\n      else if (level === 'medium') points = TWO;\n      else points = ONE;\n      return setPlayerState(() => ({\n        ...player,\n        assertions: player.assertions + 1,\n        score: player.score + (TEN + (timer * points)),\n      }));\n      // dispatchPlayer(player);\n    }\n    console.log('click');\n  }\n\n  useEffect(() => { // did mount\n    handleTrivia();\n  }, []);\n\n  useEffect(() => { // did update\n    handleAnswers();\n  }, [questions]);\n\n  useEffect(() => { // did update\n    handleTimer();\n  }, [timer]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>TRIVIA</h1>\n        <TableApp\n          name={ name }\n          score={ player.score }\n          gravatarEmail={ gravatarEmail }\n        />\n      </header>\n      <main>\n        { loading && <Loading />}\n        { questions.length > 0 && (\n          <div>\n            <p data-testid=\"question-category\">\n              { `Category: ${questions[index].category}` }\n            </p>\n            <p>{ `Time: ${timer}` }</p>\n            <p data-testid=\"question-text\">\n              { questions[index].question }\n            </p>\n            <div data-testid=\"answer-options\">\n              { /* // https://flaviocopes.com/how-to-shuffle-array-javascript/ */}\n              { answers.all.map((answer, item) => {\n                if (answer === answers.correct) {\n                  return (\n                    <div key={ item }>\n                      <Button\n                        className=\"correct\"\n                        dataTestid=\"correct-answer\"\n                        disabled={ disabled }\n                        onClick={ (event) => handleClick(event) }\n                        text={ answers.correct }\n                        type=\"button\"\n                      />\n                    </div>\n                  );\n                }\n                return (\n                  <div key={ item }>\n                    <Button\n                      className=\"incorrect\"\n                      dataTestid={ `wrong-answer-${item}` }\n                      disabled={ disabled }\n                      onClick={ (event) => handleClick(event) }\n                      text={ answer }\n                      type=\"button\"\n                    />\n                  </div>\n                );\n              })}\n            </div>\n            <div>\n              { disabled\n                ? <p className=\"msg__wrong\">Tempo esgotado! Resposta inválida.</p>\n                : <p className=\"msg__correct\">{ `Pontos: ${player.score}` }</p>}\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n  token: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  token: state.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchToken: (tokenInfo) => dispatch(requestToken(tokenInfo)),\n  dispatchPlayer: (player) => dispatch(setPlayer(player)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}