{"ast":null,"code":"var _jsxFileName = \"/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport { requestToken } from '../../store/actions';\nimport fetchToken from '../../services/token';\nimport Loading from '../../components/Loading';\nimport './style.css';\n\nfunction Game(props) {\n  const HALF = 0.5;\n  const ONE = 1;\n  const TWO = 2;\n  const THREE = 3;\n  const TEN = 10;\n  const THIRTY = 30;\n  const THOUSAND = 1000;\n  const interval = useRef();\n  const {\n    dispatchToken,\n    player: {\n      name,\n      gravatarEmail\n    },\n    token\n  } = props;\n  const [questions, setQuestions] = useState([]);\n  const [index, setIndex] = useState(0);\n  const [timer, setTimer] = useState(THIRTY);\n  const [score, setScore] = useState(0);\n  const [disabled, setDisabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [answers, setAnswers] = useState({\n    correct: '',\n    incorrect: [],\n    all: []\n  });\n\n  async function handleTrivia() {\n    setLoading(true);\n    let fetchTrivia = await fetchTriviaApi(token);\n\n    if (fetchTrivia.response_code === THREE) {\n      const tokenInfo = await fetchToken();\n      dispatchToken(tokenInfo.token);\n      fetchTrivia = await fetchTriviaApi(tokenInfo.token);\n    }\n\n    setQuestions(fetchTrivia.results);\n    setLoading(false);\n  }\n\n  function handleAnswers() {\n    if (questions.length > 0) {\n      const {\n        correct_answer: correct,\n        incorrect_answers: incorrect\n      } = questions[index]; // https://flaviocopes.com/how-to-shuffle-array-javascript/\n\n      let all = [correct, ...incorrect];\n      all = all.sort(() => Math.random() - HALF);\n      setAnswers({ ...answers,\n        correct,\n        incorrect,\n        all\n      });\n    }\n  } // https://stackoverflow.com/questions/71184843/how-to-update-state-using-setinterval-on-functional-components-in-react/71185514#71185514\n\n\n  function handleTimer() {\n    // interval useRef para funcionar\n    function runTimer() {\n      interval.current = setInterval(() => {\n        setTimer(count => count - 1);\n      }, THOUSAND);\n    }\n\n    if (timer <= 0 && interval.current) {\n      setDisabled(true);\n      clearInterval(interval.current);\n    }\n\n    if (timer === THIRTY) {\n      runTimer();\n    }\n  }\n\n  function handleClick(_ref) {\n    let {\n      target\n    } = _ref;\n    const id = target.getAttribute('data-testid').includes('correct');\n\n    if (id) {\n      const level = questions[index].difficulty;\n      if (level === 'hard') setScore(TEN + timer * THREE);else if (level === 'medium') setScore(TEN + timer * TWO);else setScore(TEN + timer * ONE);\n      console.log(score, 'score');\n    }\n\n    console.log('click');\n  }\n\n  useEffect(() => {\n    // did mount\n    handleTrivia();\n  }, []);\n  useEffect(() => {\n    // did update\n    handleAnswers();\n  }, [questions]);\n  useEffect(() => {\n    // did update\n    handleTimer();\n  }, [timer]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, \"TRIVIA\"), /*#__PURE__*/React.createElement(TableApp, {\n    name: name,\n    score: score,\n    gravatarEmail: gravatarEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, loading && /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 22\n    }\n  }), questions.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, `Category: ${questions[index].category}`), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, `Time: ${timer}`), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, questions[index].question), /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"answer-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, answers.all.map((answer, item) => {\n    if (answer === answers.correct) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"correct\",\n        dataTestid: \"correct-answer\",\n        disabled: disabled,\n        onClick: event => handleClick(event),\n        text: answers.correct,\n        type: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 23\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"incorrect\",\n      dataTestid: `wrong-answer-${item}`,\n      disabled: disabled,\n      onClick: event => handleClick(event),\n      text: answer,\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }\n    }));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, disabled ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"msg__wrong\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }, \"Resposta errada!\") : /*#__PURE__*/React.createElement(\"p\", {\n    className: \"msg__correct\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, `Acertou! Pontos: ${score}`)))));\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n  token: PropTypes.string\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  token: state.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchToken: tokenInfo => dispatch(requestToken(tokenInfo))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx"],"names":["React","useState","useEffect","useRef","PropTypes","connect","fetchTriviaApi","TableApp","Button","requestToken","fetchToken","Loading","Game","props","HALF","ONE","TWO","THREE","TEN","THIRTY","THOUSAND","interval","dispatchToken","player","name","gravatarEmail","token","questions","setQuestions","index","setIndex","timer","setTimer","score","setScore","disabled","setDisabled","loading","setLoading","answers","setAnswers","correct","incorrect","all","handleTrivia","fetchTrivia","response_code","tokenInfo","results","handleAnswers","length","correct_answer","incorrect_answers","sort","Math","random","handleTimer","runTimer","current","setInterval","count","clearInterval","handleClick","target","id","getAttribute","includes","level","difficulty","console","log","category","question","map","answer","item","event","propTypes","string","number","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport { requestToken } from '../../store/actions';\nimport fetchToken from '../../services/token';\nimport Loading from '../../components/Loading';\nimport './style.css';\n\nfunction Game(props) {\n  const HALF = 0.5;\n  const ONE = 1;\n  const TWO = 2;\n  const THREE = 3;\n  const TEN = 10;\n  const THIRTY = 30;\n  const THOUSAND = 1000;\n  const interval = useRef();\n  const { dispatchToken, player: { name, gravatarEmail }, token } = props;\n  const [questions, setQuestions] = useState([]);\n  const [index, setIndex] = useState(0);\n  const [timer, setTimer] = useState(THIRTY);\n  const [score, setScore] = useState(0);\n  const [disabled, setDisabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [answers, setAnswers] = useState({\n    correct: '',\n    incorrect: [],\n    all: [],\n  });\n\n  async function handleTrivia() {\n    setLoading(true);\n    let fetchTrivia = await fetchTriviaApi(token);\n    if (fetchTrivia.response_code === THREE) {\n      const tokenInfo = await fetchToken();\n      dispatchToken(tokenInfo.token);\n      fetchTrivia = await fetchTriviaApi(tokenInfo.token);\n    }\n    setQuestions(fetchTrivia.results);\n    setLoading(false);\n  }\n\n  function handleAnswers() {\n    if (questions.length > 0) {\n      const {\n        correct_answer: correct,\n        incorrect_answers: incorrect,\n      } = questions[index];\n      // https://flaviocopes.com/how-to-shuffle-array-javascript/\n      let all = [correct, ...incorrect];\n      all = all.sort(() => Math.random() - HALF);\n      setAnswers({\n        ...answers,\n        correct,\n        incorrect,\n        all,\n      });\n    }\n  }\n\n  // https://stackoverflow.com/questions/71184843/how-to-update-state-using-setinterval-on-functional-components-in-react/71185514#71185514\n  function handleTimer() { // interval useRef para funcionar\n    function runTimer() {\n      interval.current = setInterval(() => {\n        setTimer((count) => count - 1);\n      }, THOUSAND);\n    }\n    if (timer <= 0 && interval.current) {\n      setDisabled(true);\n      clearInterval(interval.current);\n    }\n    if (timer === THIRTY) {\n      runTimer();\n    }\n  }\n\n  function handleClick({ target }) {\n    const id = target.getAttribute('data-testid').includes('correct');\n    if (id) {\n      const level = questions[index].difficulty;\n      if (level === 'hard') setScore(TEN + (timer * THREE));\n      else if (level === 'medium') setScore(TEN + (timer * TWO));\n      else setScore(TEN + (timer * ONE));\n      console.log(score, 'score');\n    }\n    console.log('click');\n  }\n\n  useEffect(() => { // did mount\n    handleTrivia();\n  }, []);\n\n  useEffect(() => { // did update\n    handleAnswers();\n  }, [questions]);\n\n  useEffect(() => { // did update\n    handleTimer();\n  }, [timer]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>TRIVIA</h1>\n        <TableApp\n          name={ name }\n          score={ score }\n          gravatarEmail={ gravatarEmail }\n        />\n      </header>\n      <main>\n        { loading && <Loading />}\n        { questions.length > 0 && (\n          <div>\n            <p data-testid=\"question-category\">\n              { `Category: ${questions[index].category}` }\n            </p>\n            <p>{ `Time: ${timer}` }</p>\n            <p data-testid=\"question-text\">\n              { questions[index].question }\n            </p>\n            <div data-testid=\"answer-options\">\n              { /* // https://flaviocopes.com/how-to-shuffle-array-javascript/ */}\n              { answers.all.map((answer, item) => {\n                if (answer === answers.correct) {\n                  return (\n                    <div key={ item }>\n                      <Button\n                        className=\"correct\"\n                        dataTestid=\"correct-answer\"\n                        disabled={ disabled }\n                        onClick={ (event) => handleClick(event) }\n                        text={ answers.correct }\n                        type=\"button\"\n                      />\n                    </div>\n                  );\n                }\n                return (\n                  <div key={ item }>\n                    <Button\n                      className=\"incorrect\"\n                      dataTestid={ `wrong-answer-${item}` }\n                      disabled={ disabled }\n                      onClick={ (event) => handleClick(event) }\n                      text={ answer }\n                      type=\"button\"\n                    />\n                  </div>\n                );\n              })}\n            </div>\n            <div>{ disabled\n              ? <p className=\"msg__wrong\">Resposta errada!</p>\n              : <p className=\"msg__correct\">{ `Acertou! Pontos: ${score}` }</p>\n            }</div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n  token: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  token: state.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchToken: (tokenInfo) => dispatch(requestToken(tokenInfo)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}