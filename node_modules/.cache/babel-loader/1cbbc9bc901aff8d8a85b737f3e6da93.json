{"ast":null,"code":"var _jsxFileName = \"/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport { requestToken } from '../../store/actions';\nimport fetchToken from '../../services/token';\nimport './style.css';\n\nfunction Game(props) {\n  const {\n    player: {\n      name,\n      score,\n      gravatarEmail\n    },\n    dispatchToken\n  } = props;\n  const [questions, setQuestions] = useState([]);\n  const [index, setIndex] = useState(0);\n  const [answers, setAnswers] = useState({\n    correct: '',\n    incorrect: [],\n    all: []\n  });\n  const NOT_FOUND = 3;\n  const [disabled, setDisabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const FIFTYCENT = 0.5;\n\n  async function handleTrivia() {\n    const fetchTrivia = await fetchTriviaApi();\n\n    if (fetchTrivia.response_code === NOT_FOUND) {\n      const tokenInfo = await fetchToken();\n      dispatchToken(tokenInfo.token);\n    }\n\n    setQuestions(fetchTrivia.results);\n  }\n\n  function handleAnswers() {\n    if (questions.length > 0) {\n      const {\n        correct_answer: correct,\n        incorrect_answers: incorrect\n      } = questions[index]; // https://flaviocopes.com/how-to-shuffle-array-javascript/\n\n      let all = [correct, ...incorrect];\n      all = all.sort(() => Math.random() - FIFTYCENT);\n      setAnswers({ ...answers,\n        correct,\n        incorrect,\n        all\n      });\n    }\n  }\n\n  function handleClick() {\n    console.log('click');\n  }\n\n  useEffect(() => {\n    handleTrivia();\n  }, []);\n  useEffect(() => {\n    handleAnswers();\n  }, [questions]);\n  console.log(questions, answers);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \"TRIVIA\"), /*#__PURE__*/React.createElement(TableApp, {\n    name: name,\n    score: score,\n    gravatarEmail: gravatarEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, questions.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, `Category: ${questions[index].category}`), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, questions[index].question), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, answers.all.map((answer, item) => {\n    if (answer === answers.correct) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"correct\",\n        dataTestid: \"correct-answer\",\n        disabled: disabled,\n        onClick: () => handleClick(),\n        text: answers.correct,\n        type: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 23\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"incorrect\",\n      \"data-testid\": `wrong-answer-${item}`,\n      disabled: disabled,\n      onClick: () => handleClick(),\n      text: answer,\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }));\n  })))));\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  player: state.player\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchToken: tokenInfo => dispatch(requestToken(tokenInfo))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx"],"names":["React","useState","useEffect","PropTypes","connect","fetchTriviaApi","TableApp","Button","requestToken","fetchToken","Game","props","player","name","score","gravatarEmail","dispatchToken","questions","setQuestions","index","setIndex","answers","setAnswers","correct","incorrect","all","NOT_FOUND","disabled","setDisabled","loading","setLoading","FIFTYCENT","handleTrivia","fetchTrivia","response_code","tokenInfo","token","results","handleAnswers","length","correct_answer","incorrect_answers","sort","Math","random","handleClick","console","log","category","question","map","answer","item","propTypes","string","number","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport { requestToken } from '../../store/actions';\nimport fetchToken from '../../services/token';\nimport './style.css';\n\nfunction Game(props) {\n  const { player: { name, score, gravatarEmail }, dispatchToken } = props;\n  const [questions, setQuestions] = useState([]);\n  const [index, setIndex] = useState(0);\n  const [answers, setAnswers] = useState({\n    correct: '',\n    incorrect: [],\n    all: [],\n  });\n  const NOT_FOUND = 3;\n  const [disabled, setDisabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const FIFTYCENT = 0.5;\n\n  async function handleTrivia() {\n    const fetchTrivia = await fetchTriviaApi();\n    if (fetchTrivia.response_code === NOT_FOUND) {\n      const tokenInfo = await fetchToken();\n      dispatchToken(tokenInfo.token);\n    }\n    setQuestions(fetchTrivia.results);\n  }\n\n  function handleAnswers() {\n    if (questions.length > 0) {\n      const {\n        correct_answer: correct,\n        incorrect_answers: incorrect,\n      } = questions[index];\n      // https://flaviocopes.com/how-to-shuffle-array-javascript/\n      let all = [correct, ...incorrect];\n      all = all.sort(() => Math.random() - FIFTYCENT);\n      setAnswers({\n        ...answers,\n        correct,\n        incorrect,\n        all,\n      });\n    }\n  }\n\n  function handleClick() {\n    console.log('click');\n  }\n\n  useEffect(() => {\n    handleTrivia();\n  }, []);\n\n  useEffect(() => {\n    handleAnswers();\n  }, [questions]);\n\n  console.log(questions, answers);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>TRIVIA</h1>\n        <TableApp\n          name={ name }\n          score={ score }\n          gravatarEmail={ gravatarEmail }\n        />\n      </header>\n      <main>\n        { questions.length > 0 && (\n          <div>\n            <p data-testid=\"question-category\">\n              { `Category: ${questions[index].category}` }\n            </p>\n            <p data-testid=\"question-text\">\n              { questions[index].question }\n            </p>\n            <div>\n              { /* // https://flaviocopes.com/how-to-shuffle-array-javascript/ */}\n              { answers.all.map((answer, item) => {\n                if (answer === answers.correct) {\n                  return (\n                    <div key={ item }>\n                      <Button\n                        className=\"correct\"\n                        dataTestid=\"correct-answer\"\n                        disabled={ disabled }\n                        onClick={ () => handleClick() }\n                        text={ answers.correct }\n                        type=\"button\"\n                      />\n                    </div>\n                  );\n                }\n                return (\n                  <div key={ item }>\n                    <Button\n                      className=\"incorrect\"\n                      data-testid={ `wrong-answer-${item}` }\n                      disabled={ disabled }\n                      onClick={ () => handleClick() }\n                      text={ answer }\n                      type=\"button\"\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchToken: (tokenInfo) => dispatch(requestToken(tokenInfo)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}