{"ast":null,"code":"var _jsxFileName = \"/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { decode } from 'he';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport { requestToken, setPlayer } from '../../store/actions';\nimport fetchToken from '../../services/token';\nimport Loading from '../../components/Loading';\nimport { HALF, ONE, TWO, THREE, FOUR, TEN, THIRTY, THOUSAND } from '../../commons/constants';\nimport './style.css';\nimport logo from '../../assets/images/logo.png';\n\nfunction Game(props) {\n  const interval = useRef();\n  const {\n    dispatchPlayer,\n    dispatchToken,\n    history,\n    player: {\n      name,\n      assertions,\n      score,\n      total,\n      gravatarEmail\n    },\n    token\n  } = props;\n  const [questions, setQuestions] = useState([]);\n  const [countQuestions, setCountQuestions] = useState(0);\n  const [index, setIndex] = useState(0);\n  const [timer, setTimer] = useState(THIRTY);\n  const [timeEnd, setTimeEnd] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [answerIncorrect, setAnswerIncorrect] = useState(false);\n  const [answerCorrect, setAnswerCorrect] = useState(false);\n  const [answers, setAnswers] = useState({\n    correct: '',\n    incorrect: [],\n    all: []\n  });\n\n  async function handleTrivia() {\n    setLoading(true);\n    let fetchTrivia = await fetchTriviaApi(token);\n\n    if (fetchTrivia.response_code === THREE) {\n      const tokenInfo = await fetchToken();\n      dispatchToken(tokenInfo.token);\n      fetchTrivia = await fetchTriviaApi(tokenInfo.token);\n    }\n\n    setQuestions(fetchTrivia.results);\n    setLoading(false);\n  }\n\n  function handleAnswers() {\n    if (questions.length > 0) {\n      const {\n        correct_answer: correct,\n        incorrect_answers: incorrect\n      } = questions[index]; // https://flaviocopes.com/how-to-shuffle-array-javascript/\n\n      let all = [correct, ...incorrect];\n      all = all.sort(() => Math.random() - HALF);\n      setAnswers({ ...answers,\n        correct,\n        incorrect,\n        all\n      });\n    }\n  } // https://stackoverflow.com/questions/71184843/how-to-update-state-using-setinterval-on-functional-components-in-react/71185514#71185514\n\n\n  function handleTimer() {\n    // interval useRef para funcionar\n    function runTimer() {\n      interval.current = setInterval(() => {\n        setTimer(count => count - 1);\n      }, THOUSAND);\n    }\n\n    if (timer <= 0 && interval.current) {\n      setDisabled(true);\n      setTimeEnd(true);\n      clearInterval(interval.current);\n    }\n\n    if (timer === THIRTY) {\n      runTimer();\n    }\n  }\n\n  function calcScore() {\n    const level = questions[index].difficulty;\n    if (level === 'hard') return THREE;\n    if (level === 'medium') return TWO;\n    return ONE;\n  }\n\n  function handleClick(_ref) {\n    let {\n      target\n    } = _ref;\n    const correct = target.getAttribute('data-testid').includes('correct');\n\n    if (correct) {\n      const player = {\n        name,\n        assertions: assertions + 1,\n        score: TEN + timer * calcScore(),\n        total: total + (TEN + timer * calcScore()),\n        gravatarEmail\n      };\n      dispatchPlayer(player);\n      setAnswerCorrect(true);\n    } else {\n      setAnswerIncorrect(true);\n    }\n\n    setDisabled(true);\n    clearInterval(interval.current);\n  }\n\n  function handleNext() {\n    setCountQuestions(countQuestions + 1);\n    setIndex(index + 1);\n    setDisabled(false);\n    setAnswerIncorrect(false);\n    setAnswerCorrect(false);\n    setTimer(THIRTY);\n    handleAnswers();\n\n    if (countQuestions === FOUR) {\n      setCountQuestions(0);\n      history.push('/feedback');\n    }\n  }\n\n  useEffect(() => {\n    // did mount\n    handleTrivia();\n  }, []);\n  useEffect(() => {\n    // did update\n    handleAnswers();\n  }, [questions]);\n  useEffect(() => {\n    // did update\n    handleTimer();\n  }, [timer]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    alt: \"Logo\",\n    className: \"game__logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"game__score\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, `Pontos: ${score}`), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"game__total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, `Total: ${total}`), questions.length > 0 && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"game__category\",\n    \"data-testid\": \"question-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, questions[index].category.toUpperCase())), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__timer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, timer)), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, loading && /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 24\n    }\n  }), questions.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__question\",\n    \"data-testid\": \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__text\",\n    \"data-testid\": \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, questions[index].question.toUpperCase())), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__answers\",\n    \"data-testid\": \"answer-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, answers.all.map((answer, item) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__answer\",\n    key: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__answer-num\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 21\n    }\n  }, item + 1), /*#__PURE__*/React.createElement(Button, {\n    className: answer === answers.correct ? 'correct game__answer-txt' : 'incorrect game__answer-txt',\n    dataTestid: answer === answers.correct ? 'correct-answer' : `wrong-answer-${item}`,\n    disabled: disabled,\n    onClick: event => handleClick(event),\n    text: answer,\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 15\n    }\n  }, disabled && timeEnd && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"msg__timeup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 20\n    }\n  }, \"Tempo esgotado! Resposta inv\\xE1lida.\"), disabled && answerIncorrect && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"msg__wrong\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 22\n    }\n  }, \"Infelizmente voc\\xEA errou!\"), disabled && answerCorrect && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"msg__right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 20\n    }\n  }, \"Parab\\xE9ns! Voc\\xEA acertou!\"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableApp, {\n    className: \"game__profile-name\",\n    classPicture: \"game__profile-picture\",\n    classScore: \"game__profile-score\",\n    classTable: \"game__profile\",\n    name: name,\n    score: score,\n    gravatarEmail: gravatarEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }), disabled && /*#__PURE__*/React.createElement(Button, {\n    className: \"next\",\n    dataTestid: \"btn-next\",\n    onClick: () => handleNext(),\n    text: \"Next\",\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game__right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }, \"\\xA0\"));\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n  token: PropTypes.string,\n  history: PropTypes.instanceOf(Object)\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  token: state.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchToken: tokenInfo => dispatch(requestToken(tokenInfo)),\n  dispatchPlayer: player => dispatch(setPlayer(player))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx"],"names":["React","useState","useEffect","useRef","PropTypes","connect","decode","fetchTriviaApi","TableApp","Button","requestToken","setPlayer","fetchToken","Loading","HALF","ONE","TWO","THREE","FOUR","TEN","THIRTY","THOUSAND","logo","Game","props","interval","dispatchPlayer","dispatchToken","history","player","name","assertions","score","total","gravatarEmail","token","questions","setQuestions","countQuestions","setCountQuestions","index","setIndex","timer","setTimer","timeEnd","setTimeEnd","disabled","setDisabled","loading","setLoading","answerIncorrect","setAnswerIncorrect","answerCorrect","setAnswerCorrect","answers","setAnswers","correct","incorrect","all","handleTrivia","fetchTrivia","response_code","tokenInfo","results","handleAnswers","length","correct_answer","incorrect_answers","sort","Math","random","handleTimer","runTimer","current","setInterval","count","clearInterval","calcScore","level","difficulty","handleClick","target","getAttribute","includes","handleNext","push","category","toUpperCase","question","map","answer","item","event","propTypes","string","number","instanceOf","Object","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { decode } from 'he';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport { requestToken, setPlayer } from '../../store/actions';\nimport fetchToken from '../../services/token';\nimport Loading from '../../components/Loading';\nimport { HALF, ONE, TWO, THREE, FOUR,\n  TEN, THIRTY, THOUSAND } from '../../commons/constants';\nimport './style.css';\nimport logo from '../../assets/images/logo.png';\n\nfunction Game(props) {\n  const interval = useRef();\n  const { dispatchPlayer, dispatchToken, history,\n    player: { name, assertions, score, total, gravatarEmail }, token } = props;\n  const [questions, setQuestions] = useState([]);\n  const [countQuestions, setCountQuestions] = useState(0);\n  const [index, setIndex] = useState(0);\n  const [timer, setTimer] = useState(THIRTY);\n  const [timeEnd, setTimeEnd] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [answerIncorrect, setAnswerIncorrect] = useState(false);\n  const [answerCorrect, setAnswerCorrect] = useState(false);\n  const [answers, setAnswers] = useState({\n    correct: '',\n    incorrect: [],\n    all: [],\n  });\n\n  async function handleTrivia() {\n    setLoading(true);\n    let fetchTrivia = await fetchTriviaApi(token);\n    if (fetchTrivia.response_code === THREE) {\n      const tokenInfo = await fetchToken();\n      dispatchToken(tokenInfo.token);\n      fetchTrivia = await fetchTriviaApi(tokenInfo.token);\n    }\n    setQuestions(fetchTrivia.results);\n    setLoading(false);\n  }\n\n  function handleAnswers() {\n    if (questions.length > 0) {\n      const {\n        correct_answer: correct,\n        incorrect_answers: incorrect,\n      } = questions[index];\n      // https://flaviocopes.com/how-to-shuffle-array-javascript/\n      let all = [correct, ...incorrect];\n      all = all.sort(() => Math.random() - HALF);\n      setAnswers({\n        ...answers,\n        correct,\n        incorrect,\n        all,\n      });\n    }\n  }\n\n  // https://stackoverflow.com/questions/71184843/how-to-update-state-using-setinterval-on-functional-components-in-react/71185514#71185514\n  function handleTimer() { // interval useRef para funcionar\n    function runTimer() {\n      interval.current = setInterval(() => {\n        setTimer((count) => count - 1);\n      }, THOUSAND);\n    }\n    if (timer <= 0 && interval.current) {\n      setDisabled(true);\n      setTimeEnd(true);\n      clearInterval(interval.current);\n    }\n    if (timer === THIRTY) {\n      runTimer();\n    }\n  }\n\n  function calcScore() {\n    const level = questions[index].difficulty;\n    if (level === 'hard') return THREE;\n    if (level === 'medium') return TWO;\n    return ONE;\n  }\n\n  function handleClick({ target }) {\n    const correct = target.getAttribute('data-testid').includes('correct');\n    if (correct) {\n      const player = {\n        name,\n        assertions: assertions + 1,\n        score: TEN + (timer * calcScore()),\n        total: total + (TEN + (timer * calcScore())),\n        gravatarEmail,\n      };\n      dispatchPlayer(player);\n      setAnswerCorrect(true);\n    } else {\n      setAnswerIncorrect(true);\n    }\n    setDisabled(true);\n    clearInterval(interval.current);\n  }\n\n  function handleNext() {\n    setCountQuestions(countQuestions + 1);\n    setIndex(index + 1);\n    setDisabled(false);\n    setAnswerIncorrect(false);\n    setAnswerCorrect(false);\n    setTimer(THIRTY);\n    handleAnswers();\n    if (countQuestions === FOUR) {\n      setCountQuestions(0);\n      history.push('/feedback');\n    }\n  }\n\n  useEffect(() => { // did mount\n    handleTrivia();\n  }, []);\n\n  useEffect(() => { // did update\n    handleAnswers();\n  }, [questions]);\n\n  useEffect(() => { // did update\n    handleTimer();\n  }, [timer]);\n\n  return (\n    <div className=\"game\">\n      <div className=\"game__left\">\n        <header>\n          <img src={ logo } alt=\"Logo\" className=\"game__logo\" />\n          <div>\n            <p className=\"game__score\">{ `Pontos: ${score}` }</p>\n            <p className=\"game__total\">{ `Total: ${total}` }</p>\n            { questions.length > 0 && (\n              <p className=\"game__category\" data-testid=\"question-category\">\n                { (questions[index].category).toUpperCase() }\n              </p>\n            ) }\n          </div>\n          <div className=\"game__timer\">{ timer }</div>\n        </header>\n        <main>\n          { loading && <Loading />}\n          { questions.length > 0 && (\n            <div>\n              <div className=\"game__question\" data-testid=\"question-text\">\n                <div className=\"game__text\" data-testid=\"question-text\">\n                  { (questions[index].question).toUpperCase() }\n                </div>\n              </div>\n              <div className=\"game__answers\" data-testid=\"answer-options\">\n                { /* // https://flaviocopes.com/how-to-shuffle-array-javascript/ */}\n                { answers.all.map((answer, item) => (\n                  <div className=\"game__answer\" key={ item }>\n                    <div className=\"game__answer-num\">\n                      { item + 1 }\n                    </div>\n                    <Button\n                      className={ (answer === answers.correct\n                        ? 'correct game__answer-txt'\n                        : 'incorrect game__answer-txt') }\n                      dataTestid={ (answer === answers.correct\n                        ? 'correct-answer'\n                        : `wrong-answer-${item}`) }\n                      disabled={ disabled }\n                      onClick={ (event) => handleClick(event) }\n                      text={ answer }\n                      type=\"button\"\n                    />\n                  </div>\n                )) }\n              </div>\n              <div>\n                { (disabled && timeEnd)\n                && <p className=\"msg__timeup\">Tempo esgotado! Resposta inválida.</p>}\n                { (disabled && answerIncorrect)\n                  && <p className=\"msg__wrong\">Infelizmente você errou!</p>}\n                { (disabled && answerCorrect)\n                && <p className=\"msg__right\">Parabéns! Você acertou!</p>}\n              </div>\n            </div>\n          )}\n          <div>\n            <TableApp\n              className=\"game__profile-name\"\n              classPicture=\"game__profile-picture\"\n              classScore=\"game__profile-score\"\n              classTable=\"game__profile\"\n              name={ name }\n              score={ score }\n              gravatarEmail={ gravatarEmail }\n            />\n            { disabled && (\n              <Button\n                className=\"next\"\n                dataTestid=\"btn-next\"\n                onClick={ () => handleNext() }\n                text=\"Next\"\n                type=\"button\"\n              />\n            )}\n          </div>\n        </main>\n      </div>\n      <div className=\"game__right\">\n        &nbsp;\n      </div>\n    </div>\n  );\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n  token: PropTypes.string,\n  history: PropTypes.instanceOf(Object),\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  token: state.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchToken: (tokenInfo) => dispatch(requestToken(tokenInfo)),\n  dispatchPlayer: (player) => dispatch(setPlayer(player)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}