{"ast":null,"code":"var _jsxFileName = \"/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Feedback.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { setUserInfo, setRanking } from '../action';\n\nfunction Feedback(props) {\n  const SCORE_MIN = 3;\n  const {\n    player: {\n      name,\n      email,\n      score,\n      total,\n      assertions\n    }\n  } = props;\n\n  function userData() {\n    const userInfo = {\n      name,\n      email,\n      score: 0,\n      total,\n      assertions\n    };\n    const userRanking = {\n      name,\n      score: total,\n      picture: 'https://www.gravatar.com/avatar/c19ad9dbaf91c5533605fbf985177ccc'\n    };\n    localStorage.setItem('player', JSON.stringify(userInfo));\n    props.dispatchRanking(userRanking);\n    props.dispatchUserInfo(userInfo);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    \"data-testid\": \"header-profile-picture\",\n    src: \"https://www.gravatar.com/avatar/c19ad9dbaf91c5533605fbf985177ccc\",\n    alt: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    \"data-testid\": \"header-player-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, name), /*#__PURE__*/React.createElement(\"h3\", {\n    \"data-testid\": \"header-score\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, score), /*#__PURE__*/React.createElement(\"h1\", {\n    \"data-testid\": \"feedback-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, assertions < SCORE_MIN ? 'Could be better...' : 'Well Done!'), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"Total:\\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n    \"data-testid\": \"feedback-total-score\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, total)), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Total de acertos:\\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n    \"data-testid\": \"feedback-total-question\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, assertions)), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"btn-play-again\",\n    onClick: () => {\n      userData();\n      const {\n        history\n      } = props;\n      history.push('/');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Play Again\"), \"\\xA0\\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"btn-ranking\",\n    onClick: () => {\n      userData();\n      const {\n        history\n      } = props;\n      history.push('/ranking');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Ranking\")));\n}\n\nFeedback.propTypes = {\n  player: PropTypes.instanceOf(Object)\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  ranking: state.ranking\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchUserInfo(e) {\n    dispatch(setUserInfo(e));\n  },\n\n  dispatchRanking(e) {\n    dispatch(setRanking(e));\n  }\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Feedback.jsx"],"names":["React","PropTypes","connect","setUserInfo","setRanking","Feedback","props","SCORE_MIN","player","name","email","score","total","assertions","userData","userInfo","userRanking","picture","localStorage","setItem","JSON","stringify","dispatchRanking","dispatchUserInfo","history","push","propTypes","instanceOf","Object","isRequired","mapStateToProps","state","ranking","mapDispatchToProps","dispatch","e"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { setUserInfo, setRanking } from '../action';\n\nfunction Feedback(props) {\n  const SCORE_MIN = 3;\n  const { player: { name, email, score, total, assertions } } = props;\n\n  function userData() {\n    const userInfo = {\n      name,\n      email,\n      score: 0,\n      total,\n      assertions,\n    };\n    const userRanking = {\n      name,\n      score: total,\n      picture: 'https://www.gravatar.com/avatar/c19ad9dbaf91c5533605fbf985177ccc',\n    };\n\n    localStorage.setItem('player', JSON.stringify(userInfo));\n    props.dispatchRanking(userRanking);\n    props.dispatchUserInfo(userInfo);\n  }\n\n  return (\n    <div>\n      <header>\n        <img\n          data-testid=\"header-profile-picture\"\n          src=\"https://www.gravatar.com/avatar/c19ad9dbaf91c5533605fbf985177ccc\"\n          alt=\"img\"\n        />\n        <h3 data-testid=\"header-player-name\">{name}</h3>\n        <h3 data-testid=\"header-score\">{score}</h3>\n        <h1 data-testid=\"feedback-text\">\n          {assertions < SCORE_MIN ? 'Could be better...' : 'Well Done!'}\n        </h1>\n        <h3>\n          Total:&nbsp;\n          <span data-testid=\"feedback-total-score\">{total}</span>\n        </h3>\n        <h3>\n          Total de acertos:&nbsp;\n          <span data-testid=\"feedback-total-question\">{assertions}</span>\n        </h3>\n        <button\n          type=\"button\"\n          data-testid=\"btn-play-again\"\n          onClick={ () => {\n            userData();\n            const { history } = props;\n            history.push('/');\n          } }\n        >\n          Play Again\n        </button>\n        &nbsp;&nbsp;\n        <button\n          type=\"button\"\n          data-testid=\"btn-ranking\"\n          onClick={ () => {\n            userData();\n            const { history } = props;\n            history.push('/ranking');\n          } }\n        >\n          Ranking\n        </button>\n      </header>\n    </div>\n  );\n}\n\nFeedback.propTypes = {\n  player: PropTypes.instanceOf(Object),\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  ranking: state.ranking,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchUserInfo(e) {\n    dispatch(setUserInfo(e));\n  },\n  dispatchRanking(e) {\n    dispatch(setRanking(e));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n"]},"metadata":{},"sourceType":"module"}