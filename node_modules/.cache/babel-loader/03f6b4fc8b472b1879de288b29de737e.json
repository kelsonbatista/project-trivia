{"ast":null,"code":"var _jsxFileName = \"/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Feedback/index.js\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport { THREE } from '../../commons/constants';\nimport './style.css';\n\nfunction Feedback(props) {\n  const {\n    history,\n    player: {\n      name,\n      assertions,\n      score,\n      total,\n      gravatarEmail\n    }\n  } = props;\n\n  function checkAssertions() {\n    if (assertions < THREE) return 'Could be better...';\n    return 'Well Done!';\n  }\n\n  function handleRanking() {\n    console.log('run function');\n    let prevRanking = localStorage.getItem('ranking');\n    if (prevRanking === null) prevRanking = [];else prevRanking = JSON.parse(prevRanking);\n    const player = {\n      name,\n      score: total,\n      picture: gravatarEmail\n    };\n\n    if (Array.isArray(prevRanking)) {\n      prevRanking.push(player);\n      localStorage.setItem('ranking', JSON.stringify(prevRanking));\n    }\n  }\n\n  useEffect(() => {\n    handleRanking();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"feedback__left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"feedback__header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableApp, {\n    className: \"feedback__profile-name\",\n    classPicture: \"feedback__profile-picture\",\n    classPictureImage: \"feedback__profile-image\",\n    classScore: \"feedback__profile-score\",\n    classTable: \"feedback__profile\",\n    name: name,\n    score: score,\n    gravatarEmail: gravatarEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"feedback__body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    \"data-testid\": \"feedback-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, checkAssertions()), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, \"Pontos: \"), /*#__PURE__*/React.createElement(\"span\", {\n    \"data-testid\": \"feedback-total-score\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, score)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"Total: \"), /*#__PURE__*/React.createElement(\"span\", {\n    \"data-testid\": \"feedback-total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, total)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"Acertos: \"), /*#__PURE__*/React.createElement(\"span\", {\n    \"data-testid\": \"feedback-total-question\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, assertions))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"feedback__btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"play__btn\",\n    dataTestid: \"btn-play-again\",\n    onClick: () => history.push('/game'),\n    text: \"Play Again\",\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"ranking__btn\",\n    dataTestid: \"btn-ranking\",\n    onClick: () => history.push('/ranking'),\n    text: \"Ranking\",\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"feddback__right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, \"\\xA0\"));\n}\n\nFeedback.propTypes = {\n  player: PropTypes.object\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  player: state.player\n});\n\nexport default connect(mapStateToProps, null)(Feedback);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Feedback/index.js"],"names":["React","useEffect","PropTypes","connect","TableApp","Button","THREE","Feedback","props","history","player","name","assertions","score","total","gravatarEmail","checkAssertions","handleRanking","console","log","prevRanking","localStorage","getItem","JSON","parse","picture","Array","isArray","push","setItem","stringify","propTypes","object","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TableApp from '../../components/Table';\nimport Button from '../../components/Button';\nimport { THREE } from '../../commons/constants';\nimport './style.css';\n\nfunction Feedback(props) {\n  const { history, player: { name, assertions, score, total, gravatarEmail } } = props;\n\n  function checkAssertions() {\n    if (assertions < THREE) return 'Could be better...';\n    return 'Well Done!';\n  }\n\n  function handleRanking() {\n    console.log('run function');\n    let prevRanking = localStorage.getItem('ranking');\n\n    if (prevRanking === null) prevRanking = [];\n    else prevRanking = JSON.parse(prevRanking);\n\n    const player = {\n      name,\n      score: total,\n      picture: gravatarEmail,\n    };\n    if (Array.isArray(prevRanking)) {\n      prevRanking.push(player);\n      localStorage.setItem('ranking', JSON.stringify(prevRanking));\n    }\n  }\n\n  useEffect(() => {\n    handleRanking();\n  }, []);\n\n  return (\n    <div className=\"feedback\">\n      <section className=\"feedback__left\">\n        <div className=\"feedback__header\">\n          <TableApp\n            className=\"feedback__profile-name\"\n            classPicture=\"feedback__profile-picture\"\n            classPictureImage=\"feedback__profile-image\"\n            classScore=\"feedback__profile-score\"\n            classTable=\"feedback__profile\"\n            name={ name }\n            score={ score }\n            gravatarEmail={ gravatarEmail }\n          />\n        </div>\n        <div className=\"feedback__body\">\n          <h3 data-testid=\"feedback-text\">{ checkAssertions() }</h3>\n          <p>\n            <span>Pontos: </span>\n            <span data-testid=\"feedback-total-score\">{ score }</span>\n          </p>\n          <p>\n            <span>Total: </span>\n            <span data-testid=\"feedback-total\">{ total }</span>\n          </p>\n          <p>\n            <span>Acertos: </span>\n            <span data-testid=\"feedback-total-question\">{ assertions }</span>\n          </p>\n        </div>\n        <div className=\"feedback__btn\">\n          <Button\n            className=\"play__btn\"\n            dataTestid=\"btn-play-again\"\n            onClick={ () => history.push('/game') }\n            text=\"Play Again\"\n            type=\"button\"\n          />\n          <Button\n            className=\"ranking__btn\"\n            dataTestid=\"btn-ranking\"\n            onClick={ () => history.push('/ranking') }\n            text=\"Ranking\"\n            type=\"button\"\n          />\n        </div>\n      </section>\n      <section className=\"feddback__right\">\n        &nbsp;\n      </section>\n    </div>\n  );\n}\n\nFeedback.propTypes = {\n  player: PropTypes.object,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n});\n\nexport default connect(mapStateToProps, null)(Feedback);\n"]},"metadata":{},"sourceType":"module"}