{"ast":null,"code":"var _jsxFileName = \"/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/ScreenGame.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { requestToken, setHandleApi } from '../action/index';\nimport '../styles.css';\nimport { TRINTA, UM, MIL, MAX_QUESTIONS } from '../commons/constants/ScreenGame';\n\nfunction ScreenGame(props) {\n  // const numberRandom = Math.random() * 100;\n  const [btnDisable, setBtnDisable] = useState(true);\n  const [index, setIndex] = useState(0);\n  const [Interval, setIntervallGame] = useState(TRINTA);\n  const styleTrue = {\n    border: '3px solid rgb(6, 240, 15)'\n  };\n  const styleFalse = {\n    border: '3px solid rgb(255, 0, 0)'\n  };\n  const {\n    player: {\n      name,\n      score\n    },\n    questions,\n    handleApi\n  } = props;\n  const [countQuestions, setCountQuestions] = useState(1);\n  useEffect(() => {\n    handleApi();\n    setInterval(() => {\n      setIntervallGame(Inter => Inter - UM);\n    }, MIL);\n    return () => clearInterval(Interval);\n  }, []);\n  useEffect(() => {\n    if (Interval <= 0) {\n      setBtnDisable(true);\n    } else {\n      setBtnDisable(false);\n    }\n  }, [Interval]);\n\n  function checkAnswer(_ref) {\n    let {\n      target\n    } = _ref;\n    let difficulty = 0;\n\n    if (questions[index].difficulty === 'easy') {\n      difficulty = SCORE_EASY;\n    } else if (questions[index].difficulty === 'medium') {\n      difficulty = SCORE_MEDIUM;\n    } else if (questions[index].difficulty === 'hard') {\n      difficulty = SCORE_HARD;\n    }\n\n    const isCorrect = target.getAttribute('data-testid').includes('correct');\n\n    if (isCorrect) {\n      const newScore = SCORE_INIT + Interval * difficulty;\n      const userInfo = {\n        name,\n        email,\n        score: score + newScore,\n        total: total + newScore,\n        assertions: assertions + 1\n      };\n      localStorage.setItem('player', JSON.stringify(userInfo));\n      props.dispatchUserInfo(userInfo);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    \"data-testid\": \"header-profile-picture\",\n    src: \"https://www.gravatar.com/avatar/c19ad9dbaf91c5533605fbf985177ccc\",\n    alt: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    \"data-testid\": \"header-player-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, name), /*#__PURE__*/React.createElement(\"h3\", {\n    \"data-testid\": \"header-score\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, score)), questions.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"answer-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, questions[index].category), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, questions[index].question), /*#__PURE__*/React.createElement(\"section\", {\n    \"data-testid\": \"answer-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disabled: Interval <= 0 ? 'disabled' : btnDisable,\n    style: styleTrue,\n    \"data-testid\": \"correct-answer\",\n    onClick: event => checkAnswer(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, questions[index].correct_answer), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    style: styleFalse,\n    \"data-testid\": `wrong-answer-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, questions[index].incorrect_answers[0]), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    style: styleFalse,\n    \"data-testid\": `wrong-answer-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, questions[index].incorrect_answers[1]), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    style: styleFalse,\n    \"data-testid\": `wrong-answer-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, questions[index].incorrect_answers[2]))) : '', /*#__PURE__*/React.createElement(\"button\", {\n    \"data-testid\": \"btn-next\",\n    onClick: () => {\n      const {\n        history\n      } = props;\n      setCountQuestions(countQuestions + 1);\n      setIntervallGame(TRINTA);\n      setIndex(index + 1);\n\n      if (countQuestions === MAX_QUESTIONS) {\n        setCountQuestions(0);\n        history.push('/feedback');\n      }\n    },\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, \"Proxima Pergunta\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, `Tempo: ${Interval}`)));\n}\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  questions: state.questions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  RequestToken() {\n    dispatch(requestToken());\n  },\n\n  handleApi() {\n    dispatch(setHandleApi());\n  }\n\n});\n\nScreenGame.propTypes = {\n  player: PropTypes.instanceOf(Object),\n  history: PropTypes.instanceOf(Object),\n  handleApi: PropTypes.func,\n  questions: PropTypes.instanceOf(Object)\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(ScreenGame);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/ScreenGame.jsx"],"names":["React","useState","useEffect","connect","PropTypes","requestToken","setHandleApi","TRINTA","UM","MIL","MAX_QUESTIONS","ScreenGame","props","btnDisable","setBtnDisable","index","setIndex","Interval","setIntervallGame","styleTrue","border","styleFalse","player","name","score","questions","handleApi","countQuestions","setCountQuestions","setInterval","Inter","clearInterval","checkAnswer","target","difficulty","SCORE_EASY","SCORE_MEDIUM","SCORE_HARD","isCorrect","getAttribute","includes","newScore","SCORE_INIT","userInfo","email","total","assertions","localStorage","setItem","JSON","stringify","dispatchUserInfo","length","category","question","event","correct_answer","incorrect_answers","history","push","mapStateToProps","state","mapDispatchToProps","dispatch","RequestToken","propTypes","instanceOf","Object","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { requestToken, setHandleApi } from '../action/index';\nimport '../styles.css';\nimport { TRINTA, UM, MIL, MAX_QUESTIONS } from '../commons/constants/ScreenGame';\n\nfunction ScreenGame(props) {\n  // const numberRandom = Math.random() * 100;\n  const [btnDisable, setBtnDisable] = useState(true);\n  const [index, setIndex] = useState(0);\n  const [Interval, setIntervallGame] = useState(TRINTA);\n  const styleTrue = { border: '3px solid rgb(6, 240, 15)' };\n  const styleFalse = { border: '3px solid rgb(255, 0, 0)' };\n  const { player: { name, score }, questions, handleApi } = props;\n  const [countQuestions, setCountQuestions] = useState(1);\n\n  useEffect(() => {\n    handleApi();\n    setInterval(() => {\n      setIntervallGame((Inter) => Inter - UM);\n    }, MIL);\n    return () => clearInterval(Interval);\n  }, []);\n\n  useEffect(() => {\n    if (Interval <= 0) {\n      setBtnDisable(true);\n    } else {\n      setBtnDisable(false);\n    }\n  }, [Interval]);\n\n  function checkAnswer({ target }) {\n    let difficulty = 0;\n    if (questions[index].difficulty === 'easy') {\n      difficulty = SCORE_EASY;\n    } else if (questions[index].difficulty === 'medium') {\n      difficulty = SCORE_MEDIUM;\n    } else if (questions[index].difficulty === 'hard') {\n      difficulty = SCORE_HARD;\n    }\n\n    const isCorrect = target.getAttribute('data-testid').includes('correct');\n    if (isCorrect) {\n      const newScore = SCORE_INIT + (Interval * difficulty);\n      const userInfo = {\n        name,\n        email,\n        score: score + newScore,\n        total: total + newScore,\n        assertions: assertions + 1,\n      };\n      localStorage.setItem('player', JSON.stringify(userInfo));\n      props.dispatchUserInfo(userInfo);\n    }\n  }\n\n  return (\n    <div>\n      <header>\n        <img\n          data-testid=\"header-profile-picture\"\n          src=\"https://www.gravatar.com/avatar/c19ad9dbaf91c5533605fbf985177ccc\"\n          alt=\"img\"\n        />\n        <h3 data-testid=\"header-player-name\">{name}</h3>\n        <h3 data-testid=\"header-score\">{score}</h3>\n      </header>\n      {(questions.length > 0) ? (\n        <div data-testid=\"answer-options\">\n          <p data-testid=\"question-category\">{questions[index].category}</p>\n          <p data-testid=\"question-text\">{questions[index].question}</p>\n\n          <section data-testid=\"answer-options\">\n            <button\n              type=\"button\"\n              disabled={ Interval <= 0 ? 'disabled' : btnDisable }\n              style={ styleTrue }\n              data-testid=\"correct-answer\"\n              onClick={ (event) => (checkAnswer(event)) }\n            >\n              {questions[index].correct_answer}\n            </button>\n\n            <button\n              type=\"button\"\n              style={ styleFalse }\n              data-testid={ `wrong-answer-${index}` }\n            >\n              {questions[index].incorrect_answers[0]}\n            </button>\n\n            <button\n              type=\"button\"\n              style={ styleFalse }\n              data-testid={ `wrong-answer-${index}` }\n            >\n              {questions[index].incorrect_answers[1]}\n            </button>\n\n            <button\n              type=\"button\"\n              style={ styleFalse }\n              data-testid={ `wrong-answer-${index}` }\n            >\n              {questions[index].incorrect_answers[2]}\n            </button>\n          </section>\n        </div>\n      )\n        : '' }\n      <button\n        data-testid=\"btn-next\"\n        onClick={ () => {\n          const { history } = props;\n          setCountQuestions(countQuestions + 1);\n          setIntervallGame(TRINTA);\n          setIndex(index + 1);\n          if (countQuestions === MAX_QUESTIONS) {\n            setCountQuestions(0);\n            history.push('/feedback');\n          }\n        } }\n        type=\"button\"\n      >\n        Proxima Pergunta\n      </button>\n      <div>\n        <p>{`Tempo: ${Interval}`}</p>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  questions: state.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  RequestToken() {\n    dispatch(requestToken());\n  },\n  handleApi() {\n    dispatch(setHandleApi());\n  },\n});\n\nScreenGame.propTypes = {\n  player: PropTypes.instanceOf(Object),\n  history: PropTypes.instanceOf(Object),\n  handleApi: PropTypes.func,\n  questions: PropTypes.instanceOf(Object),\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScreenGame);\n"]},"metadata":{},"sourceType":"module"}