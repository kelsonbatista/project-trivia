{"ast":null,"code":"var _jsxFileName = \"/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/ScreenGame.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { requestToken, handleApi, setUserInfo } from '../action/index';\nimport '../styles.css';\nimport { TRINTA, UM, MIL, SCORE_INIT, SCORE_EASY, SCORE_MEDIUM, SCORE_HARD, MAX_QUESTIONS, CINQUENTA } from '../commons/constants/ScreenGame';\nimport checkAnswer from '../commons/utils/ScreenGame';\n\nfunction ScreenGame(props) {\n  const numberRandom = Math.random() * 100;\n  const [btnDisable, setBtnDisable] = useState(true);\n  const [index, setIndex] = useState(0);\n  const [Interval, setIntervallGame] = useState(TRINTA);\n  const styleTrue = {\n    border: '3px solid rgb(6, 240, 15)'\n  };\n  const styleFalse = {\n    border: '3px solid rgb(255, 0, 0)'\n  };\n  const {\n    player: {\n      userName,\n      userEmail,\n      score,\n      total,\n      assertions\n    },\n    questions\n  } = props;\n  const [countQuestions, setCountQuestions] = useState(1);\n  useEffect(() => {\n    props.handleApi();\n    setInterval(() => {\n      setIntervallGame(() => Interval - UM);\n    }, MIL);\n    return () => clearInterval(Interval);\n  }, []);\n  useEffect(() => {\n    if (Interval <= 0) {\n      setBtnDisable(true);\n    } else {\n      setBtnDisable(false);\n    }\n  }, [Interval]);\n  checkAnswer();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    \"data-testid\": \"header-profile-picture\",\n    src: \"https://www.gravatar.com/avatar/c19ad9dbaf91c5533605fbf985177ccc\",\n    alt: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    \"data-testid\": \"header-player-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, name), /*#__PURE__*/React.createElement(\"h3\", {\n    \"data-testid\": \"header-score\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, score)), questions.length > 0 && numberRandom <= CINQUENTA ? /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"answer-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, questions[index].category), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, questions[index].question), /*#__PURE__*/React.createElement(\"section\", {\n    \"data-testid\": \"answer-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disabled: Interval <= 0 ? 'disabled' : btnDisable,\n    style: styleTrue,\n    \"data-testid\": \"correct-answer\",\n    onClick: event => checkAnswer(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, questions[index].correct_answer), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    style: styleFalse,\n    \"data-testid\": `wrong-answer-${index}`,\n    onClick: event => checkAnswer(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, questions[index].incorrect_answers[0]), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    style: styleFalse,\n    \"data-testid\": `wrong-answer-${index}`,\n    onClick: event => checkAnswer(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, questions[index].incorrect_answers[1]), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    style: styleFalse,\n    \"data-testid\": `wrong-answer-${index}`,\n    onClick: event => checkAnswer(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, questions[index].incorrect_answers[2]))) : questions.length > 0 && numberRandom > CINQUENTA && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, questions[index].category), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, questions[index].question), /*#__PURE__*/React.createElement(\"section\", {\n    \"data-testid\": \"answer-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    style: styleFalse,\n    \"data-testid\": `wrong-answer-${index}`,\n    onClick: event => checkAnswer(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }, questions[index].incorrect_answers[0]), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    style: styleFalse,\n    \"data-testid\": `wrong-answer-${index}`,\n    onClick: event => checkAnswer(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, questions[index].incorrect_answers[1]), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disabled: Interval <= 0 ? 'disabled' : btnDisable,\n    onClick: event => checkAnswer(event),\n    style: styleTrue,\n    \"data-testid\": \"correct-answer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }, questions[index].correct_answer), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: event => checkAnswer(event),\n    style: styleFalse,\n    \"data-testid\": `wrong-answer-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, questions[index].incorrect_answers[2]))), /*#__PURE__*/React.createElement(\"button\", {\n    \"data-testid\": \"btn-next\",\n    onClick: () => {\n      const {\n        history\n      } = props;\n      setCountQuestions(countQuestions + 1);\n      setIntervallGame(TRINTA);\n      setIndex(index + 1);\n\n      if (countQuestions === MAX_QUESTIONS) {\n        setCountQuestions(0);\n        history.push('/feedback');\n      }\n    },\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, \"Proxima Pergunta\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, `Tempo: ${Interval}`)));\n}\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  questions: state.questions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  RequestToken() {\n    dispatch(requestToken());\n  },\n\n  dispatchUserInfo(score) {\n    dispatch(setUserInfo(score));\n  },\n\n  handleApi() {\n    dispatch(handleApi());\n  }\n\n});\n\nScreenGame.propTypes = {\n  player: PropTypes.instanceOf(Object),\n  dispatchUserInfo: PropTypes.func,\n  history: PropTypes.instanceOf(Object),\n  handleApi: PropTypes.func,\n  questions: PropTypes.instanceOf(Object)\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(ScreenGame);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/ScreenGame.jsx"],"names":["React","useState","useEffect","connect","PropTypes","requestToken","handleApi","setUserInfo","TRINTA","UM","MIL","SCORE_INIT","SCORE_EASY","SCORE_MEDIUM","SCORE_HARD","MAX_QUESTIONS","CINQUENTA","checkAnswer","ScreenGame","props","numberRandom","Math","random","btnDisable","setBtnDisable","index","setIndex","Interval","setIntervallGame","styleTrue","border","styleFalse","player","userName","userEmail","score","total","assertions","questions","countQuestions","setCountQuestions","setInterval","clearInterval","name","length","category","question","event","correct_answer","incorrect_answers","history","push","mapStateToProps","state","mapDispatchToProps","dispatch","RequestToken","dispatchUserInfo","propTypes","instanceOf","Object","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { requestToken, handleApi, setUserInfo } from '../action/index';\nimport '../styles.css';\nimport {\n  TRINTA,\n  UM,\n  MIL,\n  SCORE_INIT,\n  SCORE_EASY,\n  SCORE_MEDIUM,\n  SCORE_HARD,\n  MAX_QUESTIONS,\n  CINQUENTA,\n} from '../commons/constants/ScreenGame';\nimport checkAnswer from '../commons/utils/ScreenGame';\n\nfunction ScreenGame(props) {\n  const numberRandom = Math.random() * 100;\n  const [btnDisable, setBtnDisable] = useState(true);\n  const [index, setIndex] = useState(0);\n  const [Interval, setIntervallGame] = useState(TRINTA);\n  const styleTrue = { border: '3px solid rgb(6, 240, 15)' };\n  const styleFalse = { border: '3px solid rgb(255, 0, 0)' };\n  const { player: { userName, userEmail, score, total, assertions }, questions } = props;\n  const [countQuestions, setCountQuestions] = useState(1);\n\n  useEffect(() => {\n    props.handleApi();\n    setInterval(() => {\n      setIntervallGame(() => Interval - UM);\n    }, MIL);\n    return () => clearInterval(Interval);\n  }, []);\n\n  useEffect(() => {\n    if (Interval <= 0) {\n      setBtnDisable(true);\n    } else {\n      setBtnDisable(false);\n    }\n  }, [Interval]);\n\n  checkAnswer();\n\n  return (\n    <div>\n      <header>\n        <img\n          data-testid=\"header-profile-picture\"\n          src=\"https://www.gravatar.com/avatar/c19ad9dbaf91c5533605fbf985177ccc\"\n          alt=\"img\"\n        />\n        <h3 data-testid=\"header-player-name\">{name}</h3>\n        <h3 data-testid=\"header-score\">{score}</h3>\n      </header>\n      {questions.length > 0 && numberRandom <= CINQUENTA ? (\n        <div data-testid=\"answer-options\">\n          <p data-testid=\"question-category\">{questions[index].category}</p>\n          <p data-testid=\"question-text\">{questions[index].question}</p>\n\n          <section data-testid=\"answer-options\">\n            <button\n              type=\"button\"\n              disabled={ Interval <= 0 ? 'disabled' : btnDisable }\n              style={ styleTrue }\n              data-testid=\"correct-answer\"\n              onClick={ (event) => checkAnswer(event) }\n            >\n              {questions[index].correct_answer}\n            </button>\n\n            <button\n              type=\"button\"\n              style={ styleFalse }\n              data-testid={ `wrong-answer-${index}` }\n              onClick={ (event) => checkAnswer(event) }\n            >\n              {questions[index].incorrect_answers[0]}\n            </button>\n\n            <button\n              type=\"button\"\n              style={ styleFalse }\n              data-testid={ `wrong-answer-${index}` }\n              onClick={ (event) => checkAnswer(event) }\n            >\n              {questions[index].incorrect_answers[1]}\n            </button>\n\n            <button\n              type=\"button\"\n              style={ styleFalse }\n              data-testid={ `wrong-answer-${index}` }\n              onClick={ (event) => checkAnswer(event) }\n            >\n              {questions[index].incorrect_answers[2]}\n            </button>\n          </section>\n\n        </div>\n      ) : (\n        questions.length > 0\n        && numberRandom > CINQUENTA && (\n          <div>\n            <p data-testid=\"question-category\">{questions[index].category}</p>\n            <p data-testid=\"question-text\">{questions[index].question}</p>\n\n            <section data-testid=\"answer-options\">\n              <button\n                type=\"button\"\n                style={ styleFalse }\n                data-testid={ `wrong-answer-${index}` }\n                onClick={ (event) => checkAnswer(event) }\n              >\n                {questions[index].incorrect_answers[0]}\n              </button>\n\n              <button\n                type=\"button\"\n                style={ styleFalse }\n                data-testid={ `wrong-answer-${index}` }\n                onClick={ (event) => checkAnswer(event) }\n              >\n                {questions[index].incorrect_answers[1]}\n              </button>\n\n              <button\n                type=\"button\"\n                disabled={ Interval <= 0 ? 'disabled' : btnDisable }\n                onClick={ (event) => checkAnswer(event) }\n                style={ styleTrue }\n                data-testid=\"correct-answer\"\n              >\n                {questions[index].correct_answer}\n              </button>\n              <button\n                type=\"button\"\n                onClick={ (event) => checkAnswer(event) }\n                style={ styleFalse }\n                data-testid={ `wrong-answer-${index}` }\n              >\n                {questions[index].incorrect_answers[2]}\n              </button>\n            </section>\n          </div>\n        )\n      )}\n      <button\n        data-testid=\"btn-next\"\n        onClick={ () => {\n          const { history } = props;\n          setCountQuestions(countQuestions + 1);\n          setIntervallGame(TRINTA);\n          setIndex(index + 1);\n          if (countQuestions === MAX_QUESTIONS) {\n            setCountQuestions(0);\n            history.push('/feedback');\n          }\n        } }\n        type=\"button\"\n      >\n        Proxima Pergunta\n      </button>\n      <div>\n        <p>{`Tempo: ${Interval}`}</p>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  questions: state.questions,\n\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  RequestToken() {\n    dispatch(requestToken());\n  },\n  dispatchUserInfo(score) {\n    dispatch(setUserInfo(score));\n  },\n  handleApi() {\n    dispatch(handleApi());\n  },\n});\n\nScreenGame.propTypes = {\n  player: PropTypes.instanceOf(Object),\n  dispatchUserInfo: PropTypes.func,\n  history: PropTypes.instanceOf(Object),\n  handleApi: PropTypes.func,\n  questions: PropTypes.instanceOf(Object),\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScreenGame);\n"]},"metadata":{},"sourceType":"module"}