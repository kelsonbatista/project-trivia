{"ast":null,"code":"var _jsxFileName = \"/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\n\nfunction Game(props) {\n  const {\n    player: {\n      name,\n      score,\n      gravatarEmail\n    }\n  } = props;\n  const [questions, setQuestions] = useState([]);\n  const [index, setIndex] = useState(0);\n  const [answers, setAnswers] = useState('');\n  const [loading, setLoading] = useState(false);\n  console.log(questions, 'questions');\n  console.log(answers, 'answers');\n\n  async function handleTrivia() {\n    const fetchTrivia = await fetchTriviaApi();\n    setQuestions(fetchTrivia.results);\n  }\n\n  function handleAnswers() {\n    const allAnswers = [];\n\n    if (questions.length > 0) {\n      allAnswers.push(questions[index].correct_answer, ...questions[index].incorrect_answers);\n      setAnswers(allAnswers);\n    }\n  } // did mount\n\n\n  useEffect(() => {\n    handleTrivia();\n  }, []);\n  handleAnswers();\n  console.log(answers);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"TRIVIA\"), /*#__PURE__*/React.createElement(TableApp, {\n    name: name,\n    score: score,\n    gravatarEmail: gravatarEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, questions.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, `Category: ${questions[index].category}`), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, questions[index].question), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, questions[index].correct_answer)))));\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  player: state.player\n});\n\nexport default connect(mapStateToProps, null)(Game);","map":{"version":3,"sources":["/home/kelson/Projetos/trybe-projetos/16-sd-017-project-trivia-react-redux/src/pages/Game/index.jsx"],"names":["React","useState","useEffect","PropTypes","connect","fetchTriviaApi","TableApp","Game","props","player","name","score","gravatarEmail","questions","setQuestions","index","setIndex","answers","setAnswers","loading","setLoading","console","log","handleTrivia","fetchTrivia","results","handleAnswers","allAnswers","length","push","correct_answer","incorrect_answers","category","question","propTypes","string","number","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchTriviaApi from '../../services/triviaApi';\nimport TableApp from '../../components/Table';\n\nfunction Game(props) {\n  const { player: { name, score, gravatarEmail } } = props;\n  const [questions, setQuestions] = useState([]);\n  const [index, setIndex] = useState(0);\n  const [answers, setAnswers] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  console.log(questions, 'questions');\n  console.log(answers, 'answers');\n\n  async function handleTrivia() {\n    const fetchTrivia = await fetchTriviaApi();\n    setQuestions(fetchTrivia.results);\n  }\n\n  function handleAnswers() {\n    const allAnswers = [];\n    if (questions.length > 0) {\n      allAnswers.push(questions[index].correct_answer,\n        ...questions[index].incorrect_answers);\n      setAnswers(allAnswers);\n    }\n  }\n\n  // did mount\n  useEffect(() => {\n    handleTrivia();\n  }, []);\n\n  handleAnswers();\n  console.log(answers);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>TRIVIA</h1>\n        <TableApp\n          name={ name }\n          score={ score }\n          gravatarEmail={ gravatarEmail }\n        />\n      </header>\n      <main>\n        { questions.length > 0 && (\n          <div>\n            <p data-testid=\"question-category\">\n              { `Category: ${questions[index].category}` }\n            </p>\n            <p data-testid=\"question-text\">\n              { questions[index].question }\n            </p>\n            <div>\n              <p>{ questions[index].correct_answer }</p>\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nGame.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n});\n\nexport default connect(mapStateToProps, null)(Game);\n"]},"metadata":{},"sourceType":"module"}